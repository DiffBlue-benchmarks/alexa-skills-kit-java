package com.amazon.speech.json;

import org.junit.Assert;
import org.junit.rules.ExpectedException;
import org.junit.Test;

import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

import com.diffblue.java_testcase.CompareWithFieldList;
import com.diffblue.java_testcase.FieldList;
import com.diffblue.java_testcase.IterAnswer;
import com.diffblue.java_testcase.Reflector;

public class SerializedInterfaceTest {

  @org.junit.Rule
  public ExpectedException thrown = ExpectedException.none();

  /* testedClasses: SerializedInterface */


  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_json_SerializedInterface__clinit__33392293ff2fe4c7_000() throws Throwable {

    Object constructed;
    {
      /* Act */
      /* Using constructor to test static initializer */
      constructed = Reflector.getInstance("com.amazon.speech.json.SerializedInterface");
      /* Method return type is void, or not expected to return */
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

//  @org.junit.Test
//  public void com_amazon_speech_json_SerializedInterface__init__8ef78d57186c70d5_000() throws Throwable {
//
//    Object instance;
//    {
//      /* Arrange */
//      String arg1a = null;
//      int arg2i = 0;
//      Class interfaceClass = null;
//      Class stateClass = null;
//
//      /* Act */
//      /* Creating object to test constructor */
//      Class<?> c = Reflector.forName("com.amazon.speech.json.SerializedInterface");
//      Constructor<?> ctor = c.getDeclaredConstructor(Reflector.forName("java.lang.String"), Reflector.forName("int"), Reflector.forName("java.lang.Class"), Reflector.forName("java.lang.Class"));
//      ctor.setAccessible(true);
//      instance = ctor.newInstance(arg1a, arg2i, interfaceClass, stateClass);
//
//      /* Method return type is void, or not expected to return */
//    }
//  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_json_SerializedInterface_getInterfaceClass_8e52133d8ac097f8_000() throws Throwable {

    Class retval;
    {
      /* Arrange */
      String param_1 = "";
      com.amazon.speech.json.SerializedInterface param_2 = (com.amazon.speech.json.SerializedInterface) Reflector.getInstance("com.amazon.speech.json.SerializedInterface");
      Reflector.setField(param_2, "stateClass", null);
      Reflector.setField(param_2, "interfaceClass", null);
      Reflector.setField(param_2, "ordinal", 0);
      Reflector.setField(param_2, "name", param_1);

      /* Act */
      Class<?> c = Reflector.forName("com.amazon.speech.json.SerializedInterface");
      Method m = c.getDeclaredMethod("getInterfaceClass");
      m.setAccessible(true);
      retval = (Class) m.invoke(param_2);
    }
    {
      /* Assert result */
      Assert.assertEquals(null, retval);
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_json_SerializedInterface_getStateClass_c61097551560ba0f_000() throws Throwable {

    Class retval;
    {
      /* Arrange */
      String param_1 = "";
      com.amazon.speech.json.SerializedInterface param_2 = (com.amazon.speech.json.SerializedInterface) Reflector.getInstance("com.amazon.speech.json.SerializedInterface");
      Reflector.setField(param_2, "stateClass", null);
      Reflector.setField(param_2, "interfaceClass", null);
      Reflector.setField(param_2, "ordinal", 0);
      Reflector.setField(param_2, "name", param_1);

      /* Act */
      Class<?> c = Reflector.forName("com.amazon.speech.json.SerializedInterface");
      Method m = c.getDeclaredMethod("getStateClass");
      m.setAccessible(true);
      retval = (Class) m.invoke(param_2);
    }
    {
      /* Assert result */
      Assert.assertEquals(null, retval);
    }
  }
}
