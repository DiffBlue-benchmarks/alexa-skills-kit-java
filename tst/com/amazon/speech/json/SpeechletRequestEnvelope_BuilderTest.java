package com.amazon.speech.json;

import org.junit.Assert;
import org.junit.rules.ExpectedException;
import org.junit.Test;

import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

import com.diffblue.java_testcase.CompareWithFieldList;
import com.diffblue.java_testcase.FieldList;
import com.diffblue.java_testcase.IterAnswer;
import com.diffblue.java_testcase.Reflector;

public class SpeechletRequestEnvelope_BuilderTest {

  @org.junit.Rule
  public ExpectedException thrown = ExpectedException.none();

  /* testedClasses: SpeechletRequestEnvelope_Builder */


  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_json_SpeechletRequestEnvelope$Builder__init__964a7271885f561d_000() throws Throwable {

    Object instance;
    {
      /* Act */
      /* Creating object to test constructor */
      Class<?> c = Reflector.forName("com.amazon.speech.json.SpeechletRequestEnvelope$Builder");
      Constructor<?> ctor = c.getDeclaredConstructor();
      ctor.setAccessible(true);
      instance = ctor.newInstance();

      /* Method return type is void, or not expected to return */
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_json_SpeechletRequestEnvelope$Builder__init__aed52e710a45198d_000() throws Throwable {

    Object instance;
    {
      /* Arrange */
      Object x0 = null;

      /* Act */
      /* Creating object to test constructor */
      Class<?> c = Reflector.forName("com.amazon.speech.json.SpeechletRequestEnvelope$Builder");
      Constructor<?> ctor = c.getDeclaredConstructor(Reflector.forName("com.amazon.speech.json.SpeechletRequestEnvelope$1"));
      ctor.setAccessible(true);
      instance = ctor.newInstance(x0);

      /* Method return type is void, or not expected to return */
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_json_SpeechletRequestEnvelope$Builder_access$100_9955b265cf7d46c0_000() throws Throwable {

    String retval;
    {
      /* Arrange */
      Object param_0 = Reflector.getInstance("com.amazon.speech.json.SpeechletRequestEnvelope$Builder");
      Reflector.setField(param_0, "request", null);
      Reflector.setField(param_0, "session", null);
      Reflector.setField(param_0, "context", null);
      Reflector.setField(param_0, "version", null);
      Object x0 = param_0;

      /* Act */
      Class<?> c = Reflector.forName("com.amazon.speech.json.SpeechletRequestEnvelope$Builder");
      Method m = c.getDeclaredMethod("access$100", Reflector.forName("com.amazon.speech.json.SpeechletRequestEnvelope$Builder"));
      m.setAccessible(true);
      retval = (String) m.invoke(null, x0);
    }
    {
      /* Assert result */
      Assert.assertEquals(null, retval);
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_json_SpeechletRequestEnvelope$Builder_access$200_20c67e5fb9807470_000() throws Throwable {

    com.amazon.speech.speechlet.Session retval;
    {
      /* Arrange */
      Object param_0 = Reflector.getInstance("com.amazon.speech.json.SpeechletRequestEnvelope$Builder");
      Reflector.setField(param_0, "request", null);
      Reflector.setField(param_0, "session", null);
      Reflector.setField(param_0, "context", null);
      Reflector.setField(param_0, "version", null);
      Object x0 = param_0;

      /* Act */
      Class<?> c = Reflector.forName("com.amazon.speech.json.SpeechletRequestEnvelope$Builder");
      Method m = c.getDeclaredMethod("access$200", Reflector.forName("com.amazon.speech.json.SpeechletRequestEnvelope$Builder"));
      m.setAccessible(true);
      retval = (com.amazon.speech.speechlet.Session) m.invoke(null, x0);
    }
    {
      /* Assert result */
      Assert.assertEquals(null, retval);
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_json_SpeechletRequestEnvelope$Builder_access$300_6455e3dd882e414b_000() throws Throwable {

    com.amazon.speech.speechlet.Context retval;
    {
      /* Arrange */
      Object param_0 = Reflector.getInstance("com.amazon.speech.json.SpeechletRequestEnvelope$Builder");
      Reflector.setField(param_0, "request", null);
      Reflector.setField(param_0, "session", null);
      Reflector.setField(param_0, "context", null);
      Reflector.setField(param_0, "version", null);
      Object x0 = param_0;

      /* Act */
      Class<?> c = Reflector.forName("com.amazon.speech.json.SpeechletRequestEnvelope$Builder");
      Method m = c.getDeclaredMethod("access$300", Reflector.forName("com.amazon.speech.json.SpeechletRequestEnvelope$Builder"));
      m.setAccessible(true);
      retval = (com.amazon.speech.speechlet.Context) m.invoke(null, x0);
    }
    {
      /* Assert result */
      Assert.assertEquals(null, retval);
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_json_SpeechletRequestEnvelope$Builder_withContext_4fe1f2aa50673c5f_000() throws Throwable {

    Object retval;
    {
      /* Arrange */
      String param_2 = "";
      Object param_1 = Reflector.getInstance("com.amazon.speech.json.SpeechletRequestEnvelope$Builder");
      Reflector.setField(param_1, "request", null);
      Reflector.setField(param_1, "session", null);
      Reflector.setField(param_1, "context", null);
      Reflector.setField(param_1, "version", param_2);
      com.amazon.speech.speechlet.Context context = null;

      /* Act */
      Class<?> c = Reflector.forName("com.amazon.speech.json.SpeechletRequestEnvelope$Builder");
      Method m = c.getDeclaredMethod("withContext", Reflector.forName("com.amazon.speech.speechlet.Context"));
      m.setAccessible(true);
      retval = (Object) m.invoke(param_1, context);
    }
    {
      /* Assert result */
      Assert.assertNotNull(retval);
      Assert.assertNotNull(((String) Reflector.getInstanceField(retval, "version")));
      Assert.assertEquals("", ((String) Reflector.getInstanceField(retval, "version")));
      Assert.assertEquals(null, Reflector.getInstanceField(retval, "session"));
      Assert.assertEquals(null, Reflector.getInstanceField(retval, "context"));
      Assert.assertEquals(null, Reflector.getInstanceField(retval, "request"));
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_json_SpeechletRequestEnvelope$Builder_withSession_dfeda77717ddf1f6_000() throws Throwable {

    Object retval;
    {
      /* Arrange */
      com.amazon.speech.speechlet.Context param_4 = (com.amazon.speech.speechlet.Context) Reflector.getInstance("com.amazon.speech.speechlet.Context");
      Reflector.setField(param_4, "states", null);
      String param_2 = "";
      Object param_1 = Reflector.getInstance("com.amazon.speech.json.SpeechletRequestEnvelope$Builder");
      Reflector.setField(param_1, "request", null);
      Reflector.setField(param_1, "session", null);
      Reflector.setField(param_1, "context", param_4);
      Reflector.setField(param_1, "version", param_2);
      com.amazon.speech.speechlet.Session session = null;

      /* Act */
      Class<?> c = Reflector.forName("com.amazon.speech.json.SpeechletRequestEnvelope$Builder");
      Method m = c.getDeclaredMethod("withSession", Reflector.forName("com.amazon.speech.speechlet.Session"));
      m.setAccessible(true);
      retval = (Object) m.invoke(param_1, session);
    }
    {
      /* Assert result */
      Assert.assertNotNull(retval);
      Assert.assertNotNull(((String) Reflector.getInstanceField(retval, "version")));
      Assert.assertEquals("", ((String) Reflector.getInstanceField(retval, "version")));
      Assert.assertEquals(null, Reflector.getInstanceField(retval, "session"));
      Assert.assertNotNull(Reflector.getInstanceField(retval, "context"));
      Assert.assertEquals(null, Reflector.getInstanceField(Reflector.getInstanceField(retval, "context"), "states"));
      Assert.assertEquals(null, Reflector.getInstanceField(retval, "request"));
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_json_SpeechletRequestEnvelope$Builder_withVersion_69f05d7b52739e87_000() throws Throwable {

    Object retval;
    {
      /* Arrange */
      String param_2 = "";
      Object param_1 = Reflector.getInstance("com.amazon.speech.json.SpeechletRequestEnvelope$Builder");
      Reflector.setField(param_1, "request", null);
      Reflector.setField(param_1, "session", null);
      Reflector.setField(param_1, "context", null);
      Reflector.setField(param_1, "version", param_2);
      String version = null;

      /* Act */
      Class<?> c = Reflector.forName("com.amazon.speech.json.SpeechletRequestEnvelope$Builder");
      Method m = c.getDeclaredMethod("withVersion", Reflector.forName("java.lang.String"));
      m.setAccessible(true);
      retval = (Object) m.invoke(param_1, version);
    }
    {
      /* Assert result */
      Assert.assertNotNull(retval);
      Assert.assertEquals(null, ((String) Reflector.getInstanceField(retval, "version")));
      Assert.assertEquals(null, Reflector.getInstanceField(retval, "session"));
      Assert.assertEquals(null, Reflector.getInstanceField(retval, "context"));
      Assert.assertEquals(null, Reflector.getInstanceField(retval, "request"));
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_json_SpeechletRequestEnvelope_builder_74b4e17c780621a6_000() throws Throwable {

    Object retval;
    {
      /* Act */
      retval = com.amazon.speech.json.SpeechletRequestEnvelope.builder();
    }
    {
      /* Assert result */
      Assert.assertNotNull(retval);
      Assert.assertNotNull(((String) Reflector.getInstanceField(retval, "version")));
      Assert.assertEquals("1.0", ((String) Reflector.getInstanceField(retval, "version")));
      Assert.assertEquals(null, Reflector.getInstanceField(retval, "session"));
      Assert.assertEquals(null, Reflector.getInstanceField(retval, "context"));
      Assert.assertEquals(null, Reflector.getInstanceField(retval, "request"));
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_json_SpeechletRequestEnvelope_getContext_f7330a14eb0465f4_000() throws Throwable {

    com.amazon.speech.speechlet.Context retval;
    {
      /* Arrange */
      String param_1 = "";
      com.amazon.speech.json.SpeechletRequestEnvelope param_2 = (com.amazon.speech.json.SpeechletRequestEnvelope) Reflector.getInstance("com.amazon.speech.json.SpeechletRequestEnvelope");
      Reflector.setField(param_2, "request", null);
      Reflector.setField(param_2, "session", null);
      Reflector.setField(param_2, "context", null);
      Reflector.setField(param_2, "version", param_1);

      /* Act */
      retval = param_2.getContext();
    }
    {
      /* Assert result */
      Assert.assertEquals(null, retval);
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_json_SpeechletRequestEnvelope_getSession_6f2c2159128bbfae_000() throws Throwable {

    com.amazon.speech.speechlet.Session retval;
    {
      /* Arrange */
      String param_1 = "";
      com.amazon.speech.json.SpeechletRequestEnvelope param_2 = (com.amazon.speech.json.SpeechletRequestEnvelope) Reflector.getInstance("com.amazon.speech.json.SpeechletRequestEnvelope");
      Reflector.setField(param_2, "request", null);
      Reflector.setField(param_2, "session", null);
      Reflector.setField(param_2, "context", null);
      Reflector.setField(param_2, "version", param_1);

      /* Act */
      retval = param_2.getSession();
    }
    {
      /* Assert result */
      Assert.assertEquals(null, retval);
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_json_SpeechletRequestEnvelope_getVersion_4e9c3da48fbc0ee6_000() throws Throwable {

    String retval;
    {
      /* Arrange */
      com.amazon.speech.json.SpeechletRequestEnvelope param_0 = (com.amazon.speech.json.SpeechletRequestEnvelope) Reflector.getInstance("com.amazon.speech.json.SpeechletRequestEnvelope");
      Reflector.setField(param_0, "request", null);
      Reflector.setField(param_0, "session", null);
      Reflector.setField(param_0, "context", null);
      Reflector.setField(param_0, "version", null);

      /* Act */
      retval = param_0.getVersion();
    }
    {
      /* Assert result */
      Assert.assertEquals(null, retval);
    }
  }
}
