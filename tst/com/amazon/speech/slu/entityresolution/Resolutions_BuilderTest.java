package com.amazon.speech.slu.entityresolution;

import org.junit.Assert;
import org.junit.rules.ExpectedException;
import org.junit.Test;

import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

import com.diffblue.java_testcase.CompareWithFieldList;
import com.diffblue.java_testcase.FieldList;
import com.diffblue.java_testcase.IterAnswer;
import com.diffblue.java_testcase.Reflector;

public class Resolutions_BuilderTest {

  @org.junit.Rule
  public ExpectedException thrown = ExpectedException.none();

  /* testedClasses: Resolutions_Builder */


  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_slu_entityresolution_Resolutions$Builder__init__d2ab68a635f00859_000() throws Throwable {

    Object instance;
    {
      /* Act */
      /* Creating object to test constructor */
      Class<?> c = Reflector.forName("com.amazon.speech.slu.entityresolution.Resolutions$Builder");
      Constructor<?> ctor = c.getDeclaredConstructor();
      ctor.setAccessible(true);
      instance = ctor.newInstance();

      /* Method return type is void, or not expected to return */
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_slu_entityresolution_Resolutions$Builder_access$000_7327faa9583bd1e9_000() throws Throwable {

    java.util.List retval;
    {
      /* Arrange */
      Object param_0 = Reflector.getInstance("com.amazon.speech.slu.entityresolution.Resolutions$Builder");
      Reflector.setField(param_0, "resolutionsPerAuthority", null);
      Object x0 = param_0;

      /* Act */
      Class<?> c = Reflector.forName("com.amazon.speech.slu.entityresolution.Resolutions$Builder");
      Method m = c.getDeclaredMethod("access$000", Reflector.forName("com.amazon.speech.slu.entityresolution.Resolutions$Builder"));
      m.setAccessible(true);
      retval = (java.util.List) m.invoke(null, x0);
    }
    {
      /* Assert result */
      Assert.assertEquals(null, retval);
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   * conditional line 154 branch to line 154
   */

  @org.junit.Test
  public void com_amazon_speech_slu_entityresolution_Resolutions$Builder_withResolutionsPerAuthority_ec13ba7bab78804_000() throws Throwable {

    Object retval;
    {
      /* Arrange */
      com.amazon.speech.slu.entityresolution.Resolution [] dynamic_2_array = new com.amazon.speech.slu.entityresolution.Resolution []{  };
      com.amazon.speech.slu.entityresolution.Resolution [] param_13 = dynamic_2_array;

      java.util.ArrayList param_12 = new java.util.ArrayList();

      Object param_11 = Reflector.getInstance("com.amazon.speech.slu.entityresolution.Resolutions$Builder");
      Reflector.setField(param_11, "resolutionsPerAuthority", param_12);
      String param_1 = "";
      com.amazon.speech.slu.entityresolution.Resolution param_2 = (com.amazon.speech.slu.entityresolution.Resolution) Reflector.getInstance("com.amazon.speech.slu.entityresolution.Resolution");
      Reflector.setField(param_2, "values", null);
      Reflector.setField(param_2, "status", null);
      Reflector.setField(param_2, "authority", param_1);
      String param_4 = "????????????????????????????????????????????????????????????????";
      com.amazon.speech.slu.entityresolution.Resolution param_5 = (com.amazon.speech.slu.entityresolution.Resolution) Reflector.getInstance("com.amazon.speech.slu.entityresolution.Resolution");
      Reflector.setField(param_5, "values", null);
      Reflector.setField(param_5, "status", null);
      Reflector.setField(param_5, "authority", param_4);
      com.amazon.speech.slu.entityresolution.Resolution param_6 = (com.amazon.speech.slu.entityresolution.Resolution) Reflector.getInstance("com.amazon.speech.slu.entityresolution.Resolution");
      Reflector.setField(param_6, "values", null);
      Reflector.setField(param_6, "status", null);
      Reflector.setField(param_6, "authority", null);
      com.amazon.speech.slu.entityresolution.Resolution [] dynamic_44_array = new com.amazon.speech.slu.entityresolution.Resolution []{ param_6, param_5, param_2 };
      com.amazon.speech.slu.entityresolution.Resolution [] param_8 = dynamic_44_array;

      java.util.ArrayList param_9 = new java.util.ArrayList();

      java.util.List<com.amazon.speech.slu.entityresolution.Resolution> resolutionsPerAuthority = param_9;

      /* Act */
      Class<?> c = Reflector.forName("com.amazon.speech.slu.entityresolution.Resolutions$Builder");
      Method m = c.getDeclaredMethod("withResolutionsPerAuthority", Reflector.forName("java.util.List"));
      m.setAccessible(true);
      retval = (Object) m.invoke(param_11, resolutionsPerAuthority);
    }
    {
      /* Assert result */
      Assert.assertNotNull(retval);
      Assert.assertNotNull(Reflector.getInstanceField(retval, "resolutionsPerAuthority"));

      java.util.ArrayList arrayList = new java.util.ArrayList();
      Assert.assertEquals(Reflector.getInstanceField(retval, "resolutionsPerAuthority"), arrayList);
      ;
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_slu_entityresolution_Resolutions_builder_10a9d854884579be_000() throws Throwable {

    Object retval;
    {
      /* Act */
      retval = com.amazon.speech.slu.entityresolution.Resolutions.builder();
    }
    {
      /* Assert result */
      Assert.assertNotNull(retval);
      Assert.assertNotNull(Reflector.getInstanceField(retval, "resolutionsPerAuthority"));

      java.util.ArrayList arrayList = new java.util.ArrayList();
      Assert.assertEquals(Reflector.getInstanceField(retval, "resolutionsPerAuthority"), arrayList);
      ;
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   * conditional line 144 branch to line 144
   */

  @org.junit.Test
  public void com_amazon_speech_slu_entityresolution_Resolutions_getResolutionAtIndex_28f8f26b29d712fe_000() throws Throwable {

    com.amazon.speech.slu.entityresolution.Resolution retval;
    {
      /* Arrange */
      com.amazon.speech.slu.entityresolution.Resolution param_6 = (com.amazon.speech.slu.entityresolution.Resolution) Reflector.getInstance("com.amazon.speech.slu.entityresolution.Resolution");
      Reflector.setField(param_6, "values", null);
      Reflector.setField(param_6, "status", null);
      Reflector.setField(param_6, "authority", null);
      com.amazon.speech.slu.entityresolution.Resolution param_5 = (com.amazon.speech.slu.entityresolution.Resolution) Reflector.getInstance("com.amazon.speech.slu.entityresolution.Resolution");
      Reflector.setField(param_5, "values", null);
      Reflector.setField(param_5, "status", null);
      Reflector.setField(param_5, "authority", null);
      com.amazon.speech.slu.entityresolution.Resolution [] dynamic_2_array = new com.amazon.speech.slu.entityresolution.Resolution []{ null, param_5, param_6 };
      com.amazon.speech.slu.entityresolution.Resolution [] param_3 = dynamic_2_array;

      java.util.ArrayList param_2 = new java.util.ArrayList();
      param_2.add(null);

      com.amazon.speech.slu.entityresolution.Resolutions param_1 = (com.amazon.speech.slu.entityresolution.Resolutions) Reflector.getInstance("com.amazon.speech.slu.entityresolution.Resolutions");
      Reflector.setField(param_1, "resolutionsPerAuthority", param_2);
      int index = 7;

      /* Act */
      thrown.expect(IndexOutOfBoundsException.class);
      retval = param_1.getResolutionAtIndex(index);

      /* Method return type is void, or not expected to return */
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   * conditional line 144 branch to line 144
   */

  @org.junit.Test
  public void com_amazon_speech_slu_entityresolution_Resolutions_getResolutionAtIndex_28f8f26b29d712fe_001() throws Throwable {

    com.amazon.speech.slu.entityresolution.Resolution retval;
    {
      /* Arrange */
      String param_12 = "";
      com.amazon.speech.slu.entityresolution.StatusCode param_11 = (com.amazon.speech.slu.entityresolution.StatusCode) Reflector.getInstance("com.amazon.speech.slu.entityresolution.StatusCode");
      Reflector.setField(param_11, "name", param_12);
      Reflector.setField(param_11, "ordinal", 0);
      com.amazon.speech.slu.entityresolution.Status param_10 = (com.amazon.speech.slu.entityresolution.Status) Reflector.getInstance("com.amazon.speech.slu.entityresolution.Status");
      Reflector.setField(param_10, "code", param_11);
      String param_8 = "";
      com.amazon.speech.slu.entityresolution.Resolution param_7 = (com.amazon.speech.slu.entityresolution.Resolution) Reflector.getInstance("com.amazon.speech.slu.entityresolution.Resolution");
      Reflector.setField(param_7, "values", null);
      Reflector.setField(param_7, "status", param_10);
      Reflector.setField(param_7, "authority", param_8);
      com.amazon.speech.slu.entityresolution.Resolution param_6 = (com.amazon.speech.slu.entityresolution.Resolution) Reflector.getInstance("com.amazon.speech.slu.entityresolution.Resolution");
      Reflector.setField(param_6, "values", null);
      Reflector.setField(param_6, "status", null);
      Reflector.setField(param_6, "authority", null);
      com.amazon.speech.slu.entityresolution.Resolution param_5 = (com.amazon.speech.slu.entityresolution.Resolution) Reflector.getInstance("com.amazon.speech.slu.entityresolution.Resolution");
      Reflector.setField(param_5, "values", null);
      Reflector.setField(param_5, "status", null);
      Reflector.setField(param_5, "authority", null);
      com.amazon.speech.slu.entityresolution.Resolution [] dynamic_2_array = new com.amazon.speech.slu.entityresolution.Resolution []{ null, param_5, param_6, null, param_7 };
      com.amazon.speech.slu.entityresolution.Resolution [] param_3 = dynamic_2_array;

      java.util.ArrayList param_2 = new java.util.ArrayList();
      param_2.add(null);
      com.amazon.speech.slu.entityresolution.Resolution resolution = (com.amazon.speech.slu.entityresolution.Resolution) Reflector.getInstance("com.amazon.speech.slu.entityresolution.Resolution");
      Reflector.setField(resolution, "values", null);
      Reflector.setField(resolution, "authority", null);
      Reflector.setField(resolution, "status", null);
      param_2.add(resolution);
      com.amazon.speech.slu.entityresolution.Resolution resolution1 = (com.amazon.speech.slu.entityresolution.Resolution) Reflector.getInstance("com.amazon.speech.slu.entityresolution.Resolution");
      Reflector.setField(resolution1, "values", null);
      Reflector.setField(resolution1, "authority", null);
      Reflector.setField(resolution1, "status", null);
      param_2.add(resolution1);
      param_2.add(null);
      com.amazon.speech.slu.entityresolution.Resolution resolution2 = (com.amazon.speech.slu.entityresolution.Resolution) Reflector.getInstance("com.amazon.speech.slu.entityresolution.Resolution");
      Reflector.setField(resolution2, "values", null);
      Reflector.setField(resolution2, "authority", "");
      com.amazon.speech.slu.entityresolution.Status status = (com.amazon.speech.slu.entityresolution.Status) Reflector.getInstance("com.amazon.speech.slu.entityresolution.Status");
      com.amazon.speech.slu.entityresolution.StatusCode statusCode = (com.amazon.speech.slu.entityresolution.StatusCode) Reflector.getInstance("com.amazon.speech.slu.entityresolution.StatusCode");
      Reflector.setField(statusCode, "name", "");
      Reflector.setField(statusCode, "ordinal", 0);
      Reflector.setField(status, "code", statusCode);
      Reflector.setField(resolution2, "status", status);
      param_2.add(resolution2);

      com.amazon.speech.slu.entityresolution.Resolutions param_1 = (com.amazon.speech.slu.entityresolution.Resolutions) Reflector.getInstance("com.amazon.speech.slu.entityresolution.Resolutions");
      Reflector.setField(param_1, "resolutionsPerAuthority", param_2);
      int index = 2;

      /* Act */
      retval = param_1.getResolutionAtIndex(index);
    }
    {
      /* Assert result */
      Assert.assertNotNull(retval);
      Assert.assertEquals(null, ((String) Reflector.getInstanceField(retval, "authority")));
      Assert.assertEquals(null, Reflector.getInstanceField(retval, "status"));
      Assert.assertEquals(null, Reflector.getInstanceField(retval, "values"));
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_slu_entityresolution_Resolutions_getResolutionsPerAuthority_62e995625af5072c_000() throws Throwable {

    java.util.List<com.amazon.speech.slu.entityresolution.Resolution> retval;
    {
      /* Arrange */
      com.amazon.speech.slu.entityresolution.Resolutions param_0 = (com.amazon.speech.slu.entityresolution.Resolutions) Reflector.getInstance("com.amazon.speech.slu.entityresolution.Resolutions");
      Reflector.setField(param_0, "resolutionsPerAuthority", null);

      /* Act */
      retval = param_0.getResolutionsPerAuthority();
    }
    {
      /* Assert result */
      Assert.assertEquals(null, retval);
    }
  }
}
