package com.amazon.speech.slu.entityresolution;

import org.junit.Assert;
import org.junit.rules.ExpectedException;
import org.junit.Test;

import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

import com.diffblue.java_testcase.CompareWithFieldList;
import com.diffblue.java_testcase.FieldList;
import com.diffblue.java_testcase.IterAnswer;
import com.diffblue.java_testcase.Reflector;

public class Resolution_BuilderTest {

  @org.junit.Rule
  public ExpectedException thrown = ExpectedException.none();

  /* testedClasses: Resolution_Builder */


  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_slu_entityresolution_Resolution$Builder_access$000_4dedb3c47c3b349a_000() throws Throwable {

    String retval;
    {
      /* Arrange */
      Object param_0 = Reflector.getInstance("com.amazon.speech.slu.entityresolution.Resolution$Builder");
      Reflector.setField(param_0, "values", null);
      Reflector.setField(param_0, "status", null);
      Reflector.setField(param_0, "authority", null);
      Object x0 = param_0;

      /* Act */
      Class<?> c = Reflector.forName("com.amazon.speech.slu.entityresolution.Resolution$Builder");
      Method m = c.getDeclaredMethod("access$000", Reflector.forName("com.amazon.speech.slu.entityresolution.Resolution$Builder"));
      m.setAccessible(true);
      retval = (String) m.invoke(null, x0);
    }
    {
      /* Assert result */
      Assert.assertEquals(null, retval);
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_slu_entityresolution_Resolution$Builder_access$100_cbdd70455c8fd3ca_000() throws Throwable {

    com.amazon.speech.slu.entityresolution.Status retval;
    {
      /* Arrange */
      Object param_0 = Reflector.getInstance("com.amazon.speech.slu.entityresolution.Resolution$Builder");
      Reflector.setField(param_0, "values", null);
      Reflector.setField(param_0, "status", null);
      Reflector.setField(param_0, "authority", null);
      Object x0 = param_0;

      /* Act */
      Class<?> c = Reflector.forName("com.amazon.speech.slu.entityresolution.Resolution$Builder");
      Method m = c.getDeclaredMethod("access$100", Reflector.forName("com.amazon.speech.slu.entityresolution.Resolution$Builder"));
      m.setAccessible(true);
      retval = (com.amazon.speech.slu.entityresolution.Status) m.invoke(null, x0);
    }
    {
      /* Assert result */
      Assert.assertEquals(null, retval);
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_slu_entityresolution_Resolution$Builder_access$200_d3482ab2263714e7_000() throws Throwable {

    java.util.List retval;
    {
      /* Arrange */
      Object param_0 = Reflector.getInstance("com.amazon.speech.slu.entityresolution.Resolution$Builder");
      Reflector.setField(param_0, "values", null);
      Reflector.setField(param_0, "status", null);
      Reflector.setField(param_0, "authority", null);
      Object x0 = param_0;

      /* Act */
      Class<?> c = Reflector.forName("com.amazon.speech.slu.entityresolution.Resolution$Builder");
      Method m = c.getDeclaredMethod("access$200", Reflector.forName("com.amazon.speech.slu.entityresolution.Resolution$Builder"));
      m.setAccessible(true);
      retval = (java.util.List) m.invoke(null, x0);
    }
    {
      /* Assert result */
      Assert.assertEquals(null, retval);
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_slu_entityresolution_Resolution$Builder_withAuthority_77dffc6941211c7e_000() throws Throwable {

    Object retval;
    {
      /* Arrange */
      String param_2 = "";
      Object param_1 = Reflector.getInstance("com.amazon.speech.slu.entityresolution.Resolution$Builder");
      Reflector.setField(param_1, "values", null);
      Reflector.setField(param_1, "status", null);
      Reflector.setField(param_1, "authority", param_2);
      String authority = null;

      /* Act */
      Class<?> c = Reflector.forName("com.amazon.speech.slu.entityresolution.Resolution$Builder");
      Method m = c.getDeclaredMethod("withAuthority", Reflector.forName("java.lang.String"));
      m.setAccessible(true);
      retval = (Object) m.invoke(param_1, authority);
    }
    {
      /* Assert result */
      Assert.assertNotNull(retval);
      Assert.assertEquals(null, ((String) Reflector.getInstanceField(retval, "authority")));
      Assert.assertEquals(null, Reflector.getInstanceField(retval, "status"));
      Assert.assertEquals(null, Reflector.getInstanceField(retval, "values"));
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_slu_entityresolution_Resolution$Builder_withStatus_2d5296f3be603656_000() throws Throwable {

    Object retval;
    {
      /* Arrange */
      String param_2 = "";
      Object param_1 = Reflector.getInstance("com.amazon.speech.slu.entityresolution.Resolution$Builder");
      Reflector.setField(param_1, "values", null);
      Reflector.setField(param_1, "status", null);
      Reflector.setField(param_1, "authority", param_2);
      com.amazon.speech.slu.entityresolution.Status status = null;

      /* Act */
      Class<?> c = Reflector.forName("com.amazon.speech.slu.entityresolution.Resolution$Builder");
      Method m = c.getDeclaredMethod("withStatus", Reflector.forName("com.amazon.speech.slu.entityresolution.Status"));
      m.setAccessible(true);
      retval = (Object) m.invoke(param_1, status);
    }
    {
      /* Assert result */
      Assert.assertNotNull(retval);
      Assert.assertNotNull(((String) Reflector.getInstanceField(retval, "authority")));
      Assert.assertEquals("", ((String) Reflector.getInstanceField(retval, "authority")));
      Assert.assertEquals(null, Reflector.getInstanceField(retval, "status"));
      Assert.assertEquals(null, Reflector.getInstanceField(retval, "values"));
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   * conditional line 165 branch to line 165
   */

  @org.junit.Test
  public void com_amazon_speech_slu_entityresolution_Resolution$Builder_withValue_d110cbf0d537f916_000() throws Throwable {

    Object retval;
    {
      /* Arrange */
      com.amazon.speech.slu.entityresolution.ValueWrapper [] dynamic_6_array = new com.amazon.speech.slu.entityresolution.ValueWrapper []{ null };
      com.amazon.speech.slu.entityresolution.ValueWrapper [] param_5 = dynamic_6_array;

      java.util.ArrayList param_4 = new java.util.ArrayList();

      String param_2 = "";
      Object param_1 = Reflector.getInstance("com.amazon.speech.slu.entityresolution.Resolution$Builder");
      Reflector.setField(param_1, "values", param_4);
      Reflector.setField(param_1, "status", null);
      Reflector.setField(param_1, "authority", param_2);
      com.amazon.speech.slu.entityresolution.ValueWrapper value = null;

      /* Act */
      Class<?> c = Reflector.forName("com.amazon.speech.slu.entityresolution.Resolution$Builder");
      Method m = c.getDeclaredMethod("withValue", Reflector.forName("com.amazon.speech.slu.entityresolution.ValueWrapper"));
      m.setAccessible(true);
      retval = (Object) m.invoke(param_1, value);

      /* Assert side effects */
      Assert.assertEquals(1, Reflector.getInstanceField(param_4, "size"));
    }
    {
      /* Assert result */
      Assert.assertNotNull(retval);
      Assert.assertNotNull(((String) Reflector.getInstanceField(retval, "authority")));
      Assert.assertEquals("", ((String) Reflector.getInstanceField(retval, "authority")));
      Assert.assertEquals(null, Reflector.getInstanceField(retval, "status"));
      Assert.assertNotNull(Reflector.getInstanceField(retval, "values"));

      java.util.ArrayList arrayList = new java.util.ArrayList();
      arrayList.add(null);
      Assert.assertEquals(Reflector.getInstanceField(retval, "values"), arrayList);
      ;
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   * conditional line 160 branch to line 160
   */

  @org.junit.Test
  public void com_amazon_speech_slu_entityresolution_Resolution$Builder_withValues_2fbad768b415658a_000() throws Throwable {

    Object retval;
    {
      /* Arrange */
      com.amazon.speech.slu.entityresolution.ValueWrapper [] dynamic_6_array = new com.amazon.speech.slu.entityresolution.ValueWrapper []{ null, null, null, null };
      com.amazon.speech.slu.entityresolution.ValueWrapper [] param_6 = dynamic_6_array;

      java.util.ArrayList param_5 = new java.util.ArrayList();
      param_5.add(null);

      Object param_4 = Reflector.getInstance("com.amazon.speech.slu.entityresolution.Resolution$Builder");
      Reflector.setField(param_4, "values", param_5);
      Reflector.setField(param_4, "status", null);
      Reflector.setField(param_4, "authority", null);
      com.amazon.speech.slu.entityresolution.ValueWrapper [] dynamic_38_array = new com.amazon.speech.slu.entityresolution.ValueWrapper []{ null, null, null };
      com.amazon.speech.slu.entityresolution.ValueWrapper [] param_1 = dynamic_38_array;

      java.util.ArrayList param_2 = new java.util.ArrayList();
      param_2.add(null);

      java.util.List<com.amazon.speech.slu.entityresolution.ValueWrapper> values = param_2;

      /* Act */
      Class<?> c = Reflector.forName("com.amazon.speech.slu.entityresolution.Resolution$Builder");
      Method m = c.getDeclaredMethod("withValues", Reflector.forName("java.util.List"));
      m.setAccessible(true);
      retval = (Object) m.invoke(param_4, values);

      /* Assert side effects */
      Assert.assertEquals(2, Reflector.getInstanceField(param_5, "size"));
    }
    {
      /* Assert result */
      Assert.assertNotNull(retval);
      Assert.assertEquals(null, ((String) Reflector.getInstanceField(retval, "authority")));
      Assert.assertEquals(null, Reflector.getInstanceField(retval, "status"));
      Assert.assertNotNull(Reflector.getInstanceField(retval, "values"));

      java.util.ArrayList arrayList = new java.util.ArrayList();
      arrayList.add(null);
      arrayList.add(null);
      Assert.assertEquals(Reflector.getInstanceField(retval, "values"), arrayList);
      ;
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_slu_entityresolution_Resolution_builder_bf8c15dc0e2f274d_000() throws Throwable {

    Object retval;
    {
      /* Act */
      retval = com.amazon.speech.slu.entityresolution.Resolution.builder();
    }
    {
      /* Assert result */
      Assert.assertNotNull(retval);
      Assert.assertEquals(null, ((String) Reflector.getInstanceField(retval, "authority")));
      Assert.assertEquals(null, Reflector.getInstanceField(retval, "status"));
      Assert.assertNotNull(Reflector.getInstanceField(retval, "values"));

      java.util.ArrayList arrayList = new java.util.ArrayList();
      Assert.assertEquals(Reflector.getInstanceField(retval, "values"), arrayList);
      ;
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   * conditional line 138 branch to line 138
   */

  @org.junit.Test
  public void com_amazon_speech_slu_entityresolution_Resolution_getValueWrapperAtIndex_373759631fd30e1a_000() throws Throwable {

    com.amazon.speech.slu.entityresolution.ValueWrapper retval;
    {
      /* Arrange */
      com.amazon.speech.slu.entityresolution.ValueWrapper param_8 = (com.amazon.speech.slu.entityresolution.ValueWrapper) Reflector.getInstance("com.amazon.speech.slu.entityresolution.ValueWrapper");
      Reflector.setField(param_8, "value", null);
      com.amazon.speech.slu.entityresolution.ValueWrapper param_7 = (com.amazon.speech.slu.entityresolution.ValueWrapper) Reflector.getInstance("com.amazon.speech.slu.entityresolution.ValueWrapper");
      Reflector.setField(param_7, "value", null);
      com.amazon.speech.slu.entityresolution.ValueWrapper [] dynamic_6_array = new com.amazon.speech.slu.entityresolution.ValueWrapper []{ null, param_7, null, null, param_8 };
      com.amazon.speech.slu.entityresolution.ValueWrapper [] param_5 = dynamic_6_array;

      java.util.ArrayList param_4 = new java.util.ArrayList();

      String param_2 = "";
      com.amazon.speech.slu.entityresolution.Resolution param_1 = (com.amazon.speech.slu.entityresolution.Resolution) Reflector.getInstance("com.amazon.speech.slu.entityresolution.Resolution");
      Reflector.setField(param_1, "values", param_4);
      Reflector.setField(param_1, "status", null);
      Reflector.setField(param_1, "authority", param_2);
      int index = 7;

      /* Act */
      thrown.expect(IndexOutOfBoundsException.class);
      retval = param_1.getValueWrapperAtIndex(index);

      /* Method return type is void, or not expected to return */
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   * conditional line 138 branch to line 138
   */

  @org.junit.Test
  public void com_amazon_speech_slu_entityresolution_Resolution_getValueWrapperAtIndex_373759631fd30e1a_001() throws Throwable {

    com.amazon.speech.slu.entityresolution.ValueWrapper retval;
    {
      /* Arrange */
      com.amazon.speech.slu.entityresolution.ValueWrapper param_8 = (com.amazon.speech.slu.entityresolution.ValueWrapper) Reflector.getInstance("com.amazon.speech.slu.entityresolution.ValueWrapper");
      Reflector.setField(param_8, "value", null);
      com.amazon.speech.slu.entityresolution.ValueWrapper param_7 = (com.amazon.speech.slu.entityresolution.ValueWrapper) Reflector.getInstance("com.amazon.speech.slu.entityresolution.ValueWrapper");
      Reflector.setField(param_7, "value", null);
      com.amazon.speech.slu.entityresolution.ValueWrapper [] dynamic_6_array = new com.amazon.speech.slu.entityresolution.ValueWrapper []{ null, param_7, null, null, param_8 };
      com.amazon.speech.slu.entityresolution.ValueWrapper [] param_5 = dynamic_6_array;

      java.util.ArrayList param_4 = new java.util.ArrayList();
      param_4.add(null);
      com.amazon.speech.slu.entityresolution.ValueWrapper valueWrapper = (com.amazon.speech.slu.entityresolution.ValueWrapper) Reflector.getInstance("com.amazon.speech.slu.entityresolution.ValueWrapper");
      Reflector.setField(valueWrapper, "value", null);
      param_4.add(valueWrapper);
      param_4.add(null);
      param_4.add(null);

      String param_2 = "";
      com.amazon.speech.slu.entityresolution.Resolution param_1 = (com.amazon.speech.slu.entityresolution.Resolution) Reflector.getInstance("com.amazon.speech.slu.entityresolution.Resolution");
      Reflector.setField(param_1, "values", param_4);
      Reflector.setField(param_1, "status", null);
      Reflector.setField(param_1, "authority", param_2);
      int index = 3;

      /* Act */
      retval = param_1.getValueWrapperAtIndex(index);
    }
    {
      /* Assert result */
      Assert.assertEquals(null, retval);
    }
  }
}
