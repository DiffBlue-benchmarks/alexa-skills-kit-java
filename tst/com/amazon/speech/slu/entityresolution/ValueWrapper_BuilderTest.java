package com.amazon.speech.slu.entityresolution;

import org.junit.Assert;
import org.junit.rules.ExpectedException;
import org.junit.Test;

import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

import com.diffblue.java_testcase.CompareWithFieldList;
import com.diffblue.java_testcase.FieldList;
import com.diffblue.java_testcase.IterAnswer;
import com.diffblue.java_testcase.Reflector;

public class ValueWrapper_BuilderTest {

  @org.junit.Rule
  public ExpectedException thrown = ExpectedException.none();

  /* testedClasses: ValueWrapper_Builder */


  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_slu_entityresolution_ValueWrapper$Builder__init__20e080e0994a72d6_000() throws Throwable {

    Object instance;
    {
      /* Act */
      /* Creating object to test constructor */
      Class<?> c = Reflector.forName("com.amazon.speech.slu.entityresolution.ValueWrapper$Builder");
      Constructor<?> ctor = c.getDeclaredConstructor();
      ctor.setAccessible(true);
      instance = ctor.newInstance();

      /* Method return type is void, or not expected to return */
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_slu_entityresolution_ValueWrapper$Builder_access$000_a79899d9a10f112_000() throws Throwable {

    com.amazon.speech.slu.entityresolution.Value retval;
    {
      /* Arrange */
      Object param_0 = Reflector.getInstance("com.amazon.speech.slu.entityresolution.ValueWrapper$Builder");
      Reflector.setField(param_0, "value", null);
      Object x0 = param_0;

      /* Act */
      Class<?> c = Reflector.forName("com.amazon.speech.slu.entityresolution.ValueWrapper$Builder");
      Method m = c.getDeclaredMethod("access$000", Reflector.forName("com.amazon.speech.slu.entityresolution.ValueWrapper$Builder"));
      m.setAccessible(true);
      retval = (com.amazon.speech.slu.entityresolution.Value) m.invoke(null, x0);
    }
    {
      /* Assert result */
      Assert.assertEquals(null, retval);
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_slu_entityresolution_ValueWrapper$Builder_build_dad72708bd1a034a_000() throws Throwable {

    com.amazon.speech.slu.entityresolution.ValueWrapper retval;
    {
      /* Arrange */
      Object param_0 = Reflector.getInstance("com.amazon.speech.slu.entityresolution.ValueWrapper$Builder");
      Reflector.setField(param_0, "value", null);

      /* Act */
      Class<?> c = Reflector.forName("com.amazon.speech.slu.entityresolution.ValueWrapper$Builder");
      Method m = c.getDeclaredMethod("build");
      m.setAccessible(true);
      retval = (com.amazon.speech.slu.entityresolution.ValueWrapper) m.invoke(param_0);
    }
    {
      /* Assert result */
      Assert.assertNotNull(retval);
      Assert.assertEquals(null, Reflector.getInstanceField(retval, "value"));
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_slu_entityresolution_ValueWrapper$Builder_withValue_75d0ccb506627657_000() throws Throwable {

    Object retval;
    {
      /* Arrange */
      Object param_1 = Reflector.getInstance("com.amazon.speech.slu.entityresolution.ValueWrapper$Builder");
      Reflector.setField(param_1, "value", null);
      com.amazon.speech.slu.entityresolution.Value value = null;

      /* Act */
      Class<?> c = Reflector.forName("com.amazon.speech.slu.entityresolution.ValueWrapper$Builder");
      Method m = c.getDeclaredMethod("withValue", Reflector.forName("com.amazon.speech.slu.entityresolution.Value"));
      m.setAccessible(true);
      retval = (Object) m.invoke(param_1, value);
    }
    {
      /* Assert result */
      Assert.assertNotNull(retval);
      Assert.assertEquals(null, Reflector.getInstanceField(retval, "value"));
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_slu_entityresolution_ValueWrapper__init__264cd2e56f882800_000() throws Throwable {

    Object instance;
    {
      /* Arrange */
      Object param_0 = Reflector.getInstance("com.amazon.speech.slu.entityresolution.ValueWrapper$Builder");
      Reflector.setField(param_0, "value", null);
      Object builder = param_0;

      /* Act */
      /* Creating object to test constructor */
      Class<?> c = Reflector.forName("com.amazon.speech.slu.entityresolution.ValueWrapper");
      Constructor<?> ctor = c.getDeclaredConstructor(Reflector.forName("com.amazon.speech.slu.entityresolution.ValueWrapper$Builder"));
      ctor.setAccessible(true);
      instance = ctor.newInstance(builder);

      /* Method return type is void, or not expected to return */
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_slu_entityresolution_ValueWrapper__init__35f8c233f8145ed8_000() throws Throwable {

    Object instance;
    {
      /* Arrange */
      Object param_2 = Reflector.getInstance("com.amazon.speech.slu.entityresolution.ValueWrapper$Builder");
      Reflector.setField(param_2, "value", null);
      Object x0 = param_2;
      Object x1 = null;

      /* Act */
      /* Creating object to test constructor */
      Class<?> c = Reflector.forName("com.amazon.speech.slu.entityresolution.ValueWrapper");
      Constructor<?> ctor = c.getDeclaredConstructor(Reflector.forName("com.amazon.speech.slu.entityresolution.ValueWrapper$Builder"), Reflector.forName("com.amazon.speech.slu.entityresolution.ValueWrapper$1"));
      ctor.setAccessible(true);
      instance = ctor.newInstance(x0, x1);

      /* Method return type is void, or not expected to return */
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_slu_entityresolution_ValueWrapper__init__d7b91fbdaa4996e4_000() throws Throwable {

    Object instance;
    {
      /* Arrange */
      com.amazon.speech.slu.entityresolution.Value value = null;

      /* Act */
      /* Creating object to test constructor */
      Class<?> c = Reflector.forName("com.amazon.speech.slu.entityresolution.ValueWrapper");
      Constructor<?> ctor = c.getDeclaredConstructor(Reflector.forName("com.amazon.speech.slu.entityresolution.Value"));
      ctor.setAccessible(true);
      instance = ctor.newInstance(value);

      /* Method return type is void, or not expected to return */
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_slu_entityresolution_ValueWrapper_builder_1d549a94cc5c9fbf_000() throws Throwable {

    Object retval;
    {
      /* Act */
      retval = com.amazon.speech.slu.entityresolution.ValueWrapper.builder();
    }
    {
      /* Assert result */
      Assert.assertNotNull(retval);
      Assert.assertEquals(null, Reflector.getInstanceField(retval, "value"));
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_slu_entityresolution_ValueWrapper_getValue_9537e6f83b1199d5_000() throws Throwable {

    com.amazon.speech.slu.entityresolution.Value retval;
    {
      /* Arrange */
      com.amazon.speech.slu.entityresolution.ValueWrapper param_0 = (com.amazon.speech.slu.entityresolution.ValueWrapper) Reflector.getInstance("com.amazon.speech.slu.entityresolution.ValueWrapper");
      Reflector.setField(param_0, "value", null);

      /* Act */
      retval = param_0.getValue();
    }
    {
      /* Assert result */
      Assert.assertEquals(null, retval);
    }
  }
}
