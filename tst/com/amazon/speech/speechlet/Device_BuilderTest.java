package com.amazon.speech.speechlet;

import org.junit.Assert;
import org.junit.rules.ExpectedException;
import org.junit.Test;

import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

import com.diffblue.java_testcase.CompareWithFieldList;
import com.diffblue.java_testcase.FieldList;
import com.diffblue.java_testcase.IterAnswer;
import com.diffblue.java_testcase.Reflector;

public class Device_BuilderTest {

  @org.junit.Rule
  public ExpectedException thrown = ExpectedException.none();

  /* testedClasses: Device_Builder */


  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_speechlet_Device$Builder__init__7731d29f8d85d8b3_000() throws Throwable {

    Object instance;
    {
      /* Act */
      /* Creating object to test constructor */
      Class<?> c = Reflector.forName("com.amazon.speech.speechlet.Device$Builder");
      Constructor<?> ctor = c.getDeclaredConstructor();
      ctor.setAccessible(true);
      instance = ctor.newInstance();

      /* Method return type is void, or not expected to return */
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_speechlet_Device$Builder__init__ea0a821fd43c7513_000() throws Throwable {

    Object instance;
    {
      /* Arrange */
      Object x0 = null;

      /* Act */
      /* Creating object to test constructor */
      Class<?> c = Reflector.forName("com.amazon.speech.speechlet.Device$Builder");
      Constructor<?> ctor = c.getDeclaredConstructor(Reflector.forName("com.amazon.speech.speechlet.Device$1"));
      ctor.setAccessible(true);
      instance = ctor.newInstance(x0);

      /* Method return type is void, or not expected to return */
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_speechlet_Device$Builder_access$100_49d351739b604f58_000() throws Throwable {

    String retval;
    {
      /* Arrange */
      Object param_0 = Reflector.getInstance("com.amazon.speech.speechlet.Device$Builder");
      Reflector.setField(param_0, "supportedInterfaces", null);
      Reflector.setField(param_0, "deviceId", null);
      Object x0 = param_0;

      /* Act */
      Class<?> c = Reflector.forName("com.amazon.speech.speechlet.Device$Builder");
      Method m = c.getDeclaredMethod("access$100", Reflector.forName("com.amazon.speech.speechlet.Device$Builder"));
      m.setAccessible(true);
      retval = (String) m.invoke(null, x0);
    }
    {
      /* Assert result */
      Assert.assertEquals(null, retval);
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_speechlet_Device$Builder_access$200_c82391e7dfc7a01b_000() throws Throwable {

    com.amazon.speech.speechlet.SupportedInterfaces retval;
    {
      /* Arrange */
      Object param_0 = Reflector.getInstance("com.amazon.speech.speechlet.Device$Builder");
      Reflector.setField(param_0, "supportedInterfaces", null);
      Reflector.setField(param_0, "deviceId", null);
      Object x0 = param_0;

      /* Act */
      Class<?> c = Reflector.forName("com.amazon.speech.speechlet.Device$Builder");
      Method m = c.getDeclaredMethod("access$200", Reflector.forName("com.amazon.speech.speechlet.Device$Builder"));
      m.setAccessible(true);
      retval = (com.amazon.speech.speechlet.SupportedInterfaces) m.invoke(null, x0);
    }
    {
      /* Assert result */
      Assert.assertEquals(null, retval);
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_speechlet_Device$Builder_build_4baf72f499dd5a6c_000() throws Throwable {

    com.amazon.speech.speechlet.Device retval;
    {
      /* Arrange */
      String param_1 = "";
      Object param_2 = Reflector.getInstance("com.amazon.speech.speechlet.Device$Builder");
      Reflector.setField(param_2, "supportedInterfaces", null);
      Reflector.setField(param_2, "deviceId", param_1);

      /* Act */
      Class<?> c = Reflector.forName("com.amazon.speech.speechlet.Device$Builder");
      Method m = c.getDeclaredMethod("build");
      m.setAccessible(true);
      retval = (com.amazon.speech.speechlet.Device) m.invoke(param_2);
    }
    {
      /* Assert result */
      Assert.assertNotNull(retval);
      Assert.assertNotNull(((String) Reflector.getInstanceField(retval, "deviceId")));
      Assert.assertEquals("", ((String) Reflector.getInstanceField(retval, "deviceId")));
      Assert.assertEquals(null, Reflector.getInstanceField(retval, "supportedInterfaces"));
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_speechlet_Device$Builder_withDeviceId_a78bd4a06252f19a_000() throws Throwable {

    Object retval;
    {
      /* Arrange */
      String param_2 = "";
      Object param_1 = Reflector.getInstance("com.amazon.speech.speechlet.Device$Builder");
      Reflector.setField(param_1, "supportedInterfaces", null);
      Reflector.setField(param_1, "deviceId", param_2);
      String deviceId = null;

      /* Act */
      Class<?> c = Reflector.forName("com.amazon.speech.speechlet.Device$Builder");
      Method m = c.getDeclaredMethod("withDeviceId", Reflector.forName("java.lang.String"));
      m.setAccessible(true);
      retval = (Object) m.invoke(param_1, deviceId);
    }
    {
      /* Assert result */
      Assert.assertNotNull(retval);
      Assert.assertEquals(null, ((String) Reflector.getInstanceField(retval, "deviceId")));
      Assert.assertEquals(null, Reflector.getInstanceField(retval, "supportedInterfaces"));
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_speechlet_Device$Builder_withSupportedInterfaces_a1a25500d73f59f2_000() throws Throwable {

    Object retval;
    {
      /* Arrange */
      String param_2 = "";
      Object param_1 = Reflector.getInstance("com.amazon.speech.speechlet.Device$Builder");
      Reflector.setField(param_1, "supportedInterfaces", null);
      Reflector.setField(param_1, "deviceId", param_2);
      com.amazon.speech.speechlet.SupportedInterfaces supportedInterfaces = null;

      /* Act */
      Class<?> c = Reflector.forName("com.amazon.speech.speechlet.Device$Builder");
      Method m = c.getDeclaredMethod("withSupportedInterfaces", Reflector.forName("com.amazon.speech.speechlet.SupportedInterfaces"));
      m.setAccessible(true);
      retval = (Object) m.invoke(param_1, supportedInterfaces);
    }
    {
      /* Assert result */
      Assert.assertNotNull(retval);
      Assert.assertNotNull(((String) Reflector.getInstanceField(retval, "deviceId")));
      Assert.assertEquals("", ((String) Reflector.getInstanceField(retval, "deviceId")));
      Assert.assertEquals(null, Reflector.getInstanceField(retval, "supportedInterfaces"));
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_speechlet_Device__init__336300efa371e27_000() throws Throwable {

    Object instance;
    {
      /* Arrange */
      String deviceId = null;
      com.amazon.speech.speechlet.SupportedInterfaces supportedInterfaces = null;

      /* Act */
      /* Creating object to test constructor */
      Class<?> c = Reflector.forName("com.amazon.speech.speechlet.Device");
      Constructor<?> ctor = c.getDeclaredConstructor(Reflector.forName("java.lang.String"), Reflector.forName("com.amazon.speech.speechlet.SupportedInterfaces"));
      ctor.setAccessible(true);
      instance = ctor.newInstance(deviceId, supportedInterfaces);

      /* Method return type is void, or not expected to return */
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_speechlet_Device__init__44fa2c165f0aad45_000() throws Throwable {

    Object instance;
    {
      /* Arrange */
      Object param_2 = Reflector.getInstance("com.amazon.speech.speechlet.Device$Builder");
      Reflector.setField(param_2, "supportedInterfaces", null);
      Reflector.setField(param_2, "deviceId", null);
      Object x0 = param_2;
      Object x1 = null;

      /* Act */
      /* Creating object to test constructor */
      Class<?> c = Reflector.forName("com.amazon.speech.speechlet.Device");
      Constructor<?> ctor = c.getDeclaredConstructor(Reflector.forName("com.amazon.speech.speechlet.Device$Builder"), Reflector.forName("com.amazon.speech.speechlet.Device$1"));
      ctor.setAccessible(true);
      instance = ctor.newInstance(x0, x1);

      /* Method return type is void, or not expected to return */
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_speechlet_Device__init__bca2e2dbda2708ad_000() throws Throwable {

    Object instance;
    {
      /* Arrange */
      Object param_0 = Reflector.getInstance("com.amazon.speech.speechlet.Device$Builder");
      Reflector.setField(param_0, "supportedInterfaces", null);
      Reflector.setField(param_0, "deviceId", null);
      Object builder = param_0;

      /* Act */
      /* Creating object to test constructor */
      Class<?> c = Reflector.forName("com.amazon.speech.speechlet.Device");
      Constructor<?> ctor = c.getDeclaredConstructor(Reflector.forName("com.amazon.speech.speechlet.Device$Builder"));
      ctor.setAccessible(true);
      instance = ctor.newInstance(builder);

      /* Method return type is void, or not expected to return */
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_speechlet_Device_builder_387d38707ef96d3c_000() throws Throwable {

    Object retval;
    {
      /* Act */
      retval = com.amazon.speech.speechlet.Device.builder();
    }
    {
      /* Assert result */
      Assert.assertNotNull(retval);
      Assert.assertEquals(null, ((String) Reflector.getInstanceField(retval, "deviceId")));
      Assert.assertEquals(null, Reflector.getInstanceField(retval, "supportedInterfaces"));
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_speechlet_Device_getDeviceId_bc8abb44a90d3816_000() throws Throwable {

    String retval;
    {
      /* Arrange */
      com.amazon.speech.speechlet.Device param_0 = (com.amazon.speech.speechlet.Device) Reflector.getInstance("com.amazon.speech.speechlet.Device");
      Reflector.setField(param_0, "supportedInterfaces", null);
      Reflector.setField(param_0, "deviceId", null);

      /* Act */
      retval = param_0.getDeviceId();
    }
    {
      /* Assert result */
      Assert.assertEquals(null, retval);
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_speechlet_Device_getSupportedInterfaces_5c464901f01d7b88_000() throws Throwable {

    com.amazon.speech.speechlet.SupportedInterfaces retval;
    {
      /* Arrange */
      String param_1 = "";
      com.amazon.speech.speechlet.Device param_2 = (com.amazon.speech.speechlet.Device) Reflector.getInstance("com.amazon.speech.speechlet.Device");
      Reflector.setField(param_2, "supportedInterfaces", null);
      Reflector.setField(param_2, "deviceId", param_1);

      /* Act */
      retval = param_2.getSupportedInterfaces();
    }
    {
      /* Assert result */
      Assert.assertEquals(null, retval);
    }
  }
}
