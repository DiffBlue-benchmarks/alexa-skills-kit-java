package com.amazon.speech.speechlet;

import org.junit.Assert;
import org.junit.rules.ExpectedException;
import org.junit.Test;

import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

import com.diffblue.java_testcase.CompareWithFieldList;
import com.diffblue.java_testcase.FieldList;
import com.diffblue.java_testcase.IterAnswer;
import com.diffblue.java_testcase.Reflector;

public class User_BuilderTest {

  @org.junit.Rule
  public ExpectedException thrown = ExpectedException.none();

  /* testedClasses: User_Builder */


  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_speechlet_User$Builder__init__d1bf655092a9e02_000() throws Throwable {

    Object instance;
    {
      /* Act */
      /* Creating object to test constructor */
      Class<?> c = Reflector.forName("com.amazon.speech.speechlet.User$Builder");
      Constructor<?> ctor = c.getDeclaredConstructor();
      ctor.setAccessible(true);
      instance = ctor.newInstance();

      /* Method return type is void, or not expected to return */
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_speechlet_User$Builder__init__ef6ea633e25b20a1_000() throws Throwable {

    Object instance;
    {
      /* Arrange */
      Object x0 = null;

      /* Act */
      /* Creating object to test constructor */
      Class<?> c = Reflector.forName("com.amazon.speech.speechlet.User$Builder");
      Constructor<?> ctor = c.getDeclaredConstructor(Reflector.forName("com.amazon.speech.speechlet.User$1"));
      ctor.setAccessible(true);
      instance = ctor.newInstance(x0);

      /* Method return type is void, or not expected to return */
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_speechlet_User$Builder_access$100_f5891a4f32f1409a_000() throws Throwable {

    String retval;
    {
      /* Arrange */
      Object param_0 = Reflector.getInstance("com.amazon.speech.speechlet.User$Builder");
      Reflector.setField(param_0, "permissions", null);
      Reflector.setField(param_0, "accessToken", null);
      Reflector.setField(param_0, "userId", null);
      Object x0 = param_0;

      /* Act */
      Class<?> c = Reflector.forName("com.amazon.speech.speechlet.User$Builder");
      Method m = c.getDeclaredMethod("access$100", Reflector.forName("com.amazon.speech.speechlet.User$Builder"));
      m.setAccessible(true);
      retval = (String) m.invoke(null, x0);
    }
    {
      /* Assert result */
      Assert.assertEquals(null, retval);
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_speechlet_User$Builder_access$200_c9c5563c0545c4cc_000() throws Throwable {

    String retval;
    {
      /* Arrange */
      Object param_0 = Reflector.getInstance("com.amazon.speech.speechlet.User$Builder");
      Reflector.setField(param_0, "permissions", null);
      Reflector.setField(param_0, "accessToken", null);
      Reflector.setField(param_0, "userId", null);
      Object x0 = param_0;

      /* Act */
      Class<?> c = Reflector.forName("com.amazon.speech.speechlet.User$Builder");
      Method m = c.getDeclaredMethod("access$200", Reflector.forName("com.amazon.speech.speechlet.User$Builder"));
      m.setAccessible(true);
      retval = (String) m.invoke(null, x0);
    }
    {
      /* Assert result */
      Assert.assertEquals(null, retval);
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_speechlet_User$Builder_access$300_e211beaa0509dd70_000() throws Throwable {

    com.amazon.speech.speechlet.Permissions retval;
    {
      /* Arrange */
      Object param_0 = Reflector.getInstance("com.amazon.speech.speechlet.User$Builder");
      Reflector.setField(param_0, "permissions", null);
      Reflector.setField(param_0, "accessToken", null);
      Reflector.setField(param_0, "userId", null);
      Object x0 = param_0;

      /* Act */
      Class<?> c = Reflector.forName("com.amazon.speech.speechlet.User$Builder");
      Method m = c.getDeclaredMethod("access$300", Reflector.forName("com.amazon.speech.speechlet.User$Builder"));
      m.setAccessible(true);
      retval = (com.amazon.speech.speechlet.Permissions) m.invoke(null, x0);
    }
    {
      /* Assert result */
      Assert.assertEquals(null, retval);
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_speechlet_User$Builder_build_ab7f7a33d2ea3970_000() throws Throwable {

    com.amazon.speech.speechlet.User retval;
    {
      /* Arrange */
      String param_1 = "";
      String param_3 = "";
      Object param_4 = Reflector.getInstance("com.amazon.speech.speechlet.User$Builder");
      Reflector.setField(param_4, "permissions", null);
      Reflector.setField(param_4, "accessToken", param_1);
      Reflector.setField(param_4, "userId", param_3);

      /* Act */
      Class<?> c = Reflector.forName("com.amazon.speech.speechlet.User$Builder");
      Method m = c.getDeclaredMethod("build");
      m.setAccessible(true);
      retval = (com.amazon.speech.speechlet.User) m.invoke(param_4);
    }
    {
      /* Assert result */
      Assert.assertNotNull(retval);
      Assert.assertNotNull(((String) Reflector.getInstanceField(retval, "userId")));
      Assert.assertEquals("", ((String) Reflector.getInstanceField(retval, "userId")));
      Assert.assertNotNull(((String) Reflector.getInstanceField(retval, "accessToken")));
      Assert.assertEquals("", ((String) Reflector.getInstanceField(retval, "accessToken")));
      Assert.assertEquals(null, Reflector.getInstanceField(retval, "permissions"));
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_speechlet_User$Builder_withAccessToken_511061fb38d3c3de_000() throws Throwable {

    Object retval;
    {
      /* Arrange */
      String param_4 = "";
      String param_2 = "";
      Object param_1 = Reflector.getInstance("com.amazon.speech.speechlet.User$Builder");
      Reflector.setField(param_1, "permissions", null);
      Reflector.setField(param_1, "accessToken", param_4);
      Reflector.setField(param_1, "userId", param_2);
      String accessToken = null;

      /* Act */
      Class<?> c = Reflector.forName("com.amazon.speech.speechlet.User$Builder");
      Method m = c.getDeclaredMethod("withAccessToken", Reflector.forName("java.lang.String"));
      m.setAccessible(true);
      retval = (Object) m.invoke(param_1, accessToken);
    }
    {
      /* Assert result */
      Assert.assertNotNull(retval);
      Assert.assertNotNull(((String) Reflector.getInstanceField(retval, "userId")));
      Assert.assertEquals("", ((String) Reflector.getInstanceField(retval, "userId")));
      Assert.assertEquals(null, ((String) Reflector.getInstanceField(retval, "accessToken")));
      Assert.assertEquals(null, Reflector.getInstanceField(retval, "permissions"));
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_speechlet_User$Builder_withPermissions_c937e134660c847f_000() throws Throwable {

    Object retval;
    {
      /* Arrange */
      String param_4 = "";
      String param_2 = "";
      Object param_1 = Reflector.getInstance("com.amazon.speech.speechlet.User$Builder");
      Reflector.setField(param_1, "permissions", null);
      Reflector.setField(param_1, "accessToken", param_4);
      Reflector.setField(param_1, "userId", param_2);
      com.amazon.speech.speechlet.Permissions permissions = null;

      /* Act */
      Class<?> c = Reflector.forName("com.amazon.speech.speechlet.User$Builder");
      Method m = c.getDeclaredMethod("withPermissions", Reflector.forName("com.amazon.speech.speechlet.Permissions"));
      m.setAccessible(true);
      retval = (Object) m.invoke(param_1, permissions);
    }
    {
      /* Assert result */
      Assert.assertNotNull(retval);
      Assert.assertNotNull(((String) Reflector.getInstanceField(retval, "userId")));
      Assert.assertEquals("", ((String) Reflector.getInstanceField(retval, "userId")));
      Assert.assertNotNull(((String) Reflector.getInstanceField(retval, "accessToken")));
      Assert.assertEquals("", ((String) Reflector.getInstanceField(retval, "accessToken")));
      Assert.assertEquals(null, Reflector.getInstanceField(retval, "permissions"));
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_speechlet_User$Builder_withUserId_59e49144206087e7_000() throws Throwable {

    Object retval;
    {
      /* Arrange */
      String param_4 = "";
      String param_2 = "";
      Object param_1 = Reflector.getInstance("com.amazon.speech.speechlet.User$Builder");
      Reflector.setField(param_1, "permissions", null);
      Reflector.setField(param_1, "accessToken", param_4);
      Reflector.setField(param_1, "userId", param_2);
      String userId = null;

      /* Act */
      Class<?> c = Reflector.forName("com.amazon.speech.speechlet.User$Builder");
      Method m = c.getDeclaredMethod("withUserId", Reflector.forName("java.lang.String"));
      m.setAccessible(true);
      retval = (Object) m.invoke(param_1, userId);
    }
    {
      /* Assert result */
      Assert.assertNotNull(retval);
      Assert.assertEquals(null, ((String) Reflector.getInstanceField(retval, "userId")));
      Assert.assertNotNull(((String) Reflector.getInstanceField(retval, "accessToken")));
      Assert.assertEquals("", ((String) Reflector.getInstanceField(retval, "accessToken")));
      Assert.assertEquals(null, Reflector.getInstanceField(retval, "permissions"));
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_speechlet_User__init__7ad6c08d829fc85d_000() throws Throwable {

    Object instance;
    {
      /* Arrange */
      Object param_0 = Reflector.getInstance("com.amazon.speech.speechlet.User$Builder");
      Reflector.setField(param_0, "permissions", null);
      Reflector.setField(param_0, "accessToken", null);
      Reflector.setField(param_0, "userId", null);
      Object builder = param_0;

      /* Act */
      /* Creating object to test constructor */
      Class<?> c = Reflector.forName("com.amazon.speech.speechlet.User");
      Constructor<?> ctor = c.getDeclaredConstructor(Reflector.forName("com.amazon.speech.speechlet.User$Builder"));
      ctor.setAccessible(true);
      instance = ctor.newInstance(builder);

      /* Method return type is void, or not expected to return */
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_speechlet_User__init__86bb92beb4f7e652_000() throws Throwable {

    com.amazon.speech.speechlet.User instance;
    {
      /* Arrange */
      String userId = null;

      /* Act */
      /* Creating object to test constructor */
      instance = new com.amazon.speech.speechlet.User(userId);

      /* Method return type is void, or not expected to return */
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_speechlet_User__init__8ecc85f4f349bfd5_000() throws Throwable {

    Object instance;
    {
      /* Arrange */
      Object param_2 = Reflector.getInstance("com.amazon.speech.speechlet.User$Builder");
      Reflector.setField(param_2, "permissions", null);
      Reflector.setField(param_2, "accessToken", null);
      Reflector.setField(param_2, "userId", null);
      Object x0 = param_2;
      Object x1 = null;

      /* Act */
      /* Creating object to test constructor */
      Class<?> c = Reflector.forName("com.amazon.speech.speechlet.User");
      Constructor<?> ctor = c.getDeclaredConstructor(Reflector.forName("com.amazon.speech.speechlet.User$Builder"), Reflector.forName("com.amazon.speech.speechlet.User$1"));
      ctor.setAccessible(true);
      instance = ctor.newInstance(x0, x1);

      /* Method return type is void, or not expected to return */
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_speechlet_User__init__d1767738b66d5056_000() throws Throwable {

    Object instance;
    {
      /* Act */
      /* Creating object to test constructor */
      Class<?> c = Reflector.forName("com.amazon.speech.speechlet.User");
      Constructor<?> ctor = c.getDeclaredConstructor();
      ctor.setAccessible(true);
      instance = ctor.newInstance();

      /* Method return type is void, or not expected to return */
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_speechlet_User__init__ef04438c520e963b_000() throws Throwable {

    Object instance;
    {
      /* Arrange */
      String userId = null;
      String accessToken = null;
      com.amazon.speech.speechlet.Permissions permissions = null;

      /* Act */
      /* Creating object to test constructor */
      Class<?> c = Reflector.forName("com.amazon.speech.speechlet.User");
      Constructor<?> ctor = c.getDeclaredConstructor(Reflector.forName("java.lang.String"), Reflector.forName("java.lang.String"), Reflector.forName("com.amazon.speech.speechlet.Permissions"));
      ctor.setAccessible(true);
      instance = ctor.newInstance(userId, accessToken, permissions);

      /* Method return type is void, or not expected to return */
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_speechlet_User_builder_a4f6daf9c9f05e7f_000() throws Throwable {

    Object retval;
    {
      /* Act */
      retval = com.amazon.speech.speechlet.User.builder();
    }
    {
      /* Assert result */
      Assert.assertNotNull(retval);
      Assert.assertEquals(null, ((String) Reflector.getInstanceField(retval, "userId")));
      Assert.assertEquals(null, ((String) Reflector.getInstanceField(retval, "accessToken")));
      Assert.assertEquals(null, Reflector.getInstanceField(retval, "permissions"));
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_speechlet_User_getAccessToken_22c934bf4b4c5c1_000() throws Throwable {

    String retval;
    {
      /* Arrange */
      String param_1 = "";
      com.amazon.speech.speechlet.User param_2 = (com.amazon.speech.speechlet.User) Reflector.getInstance("com.amazon.speech.speechlet.User");
      Reflector.setField(param_2, "permissions", null);
      Reflector.setField(param_2, "accessToken", null);
      Reflector.setField(param_2, "userId", param_1);

      /* Act */
      retval = param_2.getAccessToken();
    }
    {
      /* Assert result */
      Assert.assertEquals(null, retval);
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_speechlet_User_getPermissions_887178b04b094ea8_000() throws Throwable {

    com.amazon.speech.speechlet.Permissions retval;
    {
      /* Arrange */
      String param_1 = "";
      String param_3 = "";
      com.amazon.speech.speechlet.User param_4 = (com.amazon.speech.speechlet.User) Reflector.getInstance("com.amazon.speech.speechlet.User");
      Reflector.setField(param_4, "permissions", null);
      Reflector.setField(param_4, "accessToken", param_1);
      Reflector.setField(param_4, "userId", param_3);

      /* Act */
      retval = param_4.getPermissions();
    }
    {
      /* Assert result */
      Assert.assertEquals(null, retval);
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_speechlet_User_getUserId_3a402d1d5bab1d08_000() throws Throwable {

    String retval;
    {
      /* Arrange */
      String param_1 = "";
      String param_3 = "";
      com.amazon.speech.speechlet.User param_4 = (com.amazon.speech.speechlet.User) Reflector.getInstance("com.amazon.speech.speechlet.User");
      Reflector.setField(param_4, "permissions", null);
      Reflector.setField(param_4, "accessToken", param_1);
      Reflector.setField(param_4, "userId", param_3);

      /* Act */
      retval = param_4.getUserId();
    }
    {
      /* Assert result */
      Assert.assertNotNull(retval);
      Assert.assertEquals("", retval);
    }
  }
}
