package com.amazon.speech.speechlet;

import org.junit.Assert;
import org.junit.rules.ExpectedException;
import org.junit.Test;

import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

import com.diffblue.java_testcase.CompareWithFieldList;
import com.diffblue.java_testcase.FieldList;
import com.diffblue.java_testcase.IterAnswer;
import com.diffblue.java_testcase.Reflector;

public class SupportedInterfaces_BuilderTest {

  @org.junit.Rule
  public ExpectedException thrown = ExpectedException.none();

  /* testedClasses: SupportedInterfaces_Builder */


  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_speechlet_SupportedInterfaces$Builder__init__a2fd115cf53c96df_000() throws Throwable {

    Object instance;
    {
      /* Arrange */
      Object x0 = null;

      /* Act */
      /* Creating object to test constructor */
      Class<?> c = Reflector.forName("com.amazon.speech.speechlet.SupportedInterfaces$Builder");
      Constructor<?> ctor = c.getDeclaredConstructor(Reflector.forName("com.amazon.speech.speechlet.SupportedInterfaces$1"));
      ctor.setAccessible(true);
      instance = ctor.newInstance(x0);

      /* Method return type is void, or not expected to return */
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_speechlet_SupportedInterfaces$Builder__init__c65c255e7a0b2a3f_000() throws Throwable {

    Object instance;
    {
      /* Act */
      /* Creating object to test constructor */
      Class<?> c = Reflector.forName("com.amazon.speech.speechlet.SupportedInterfaces$Builder");
      Constructor<?> ctor = c.getDeclaredConstructor();
      ctor.setAccessible(true);
      instance = ctor.newInstance();

      /* Method return type is void, or not expected to return */
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_speechlet_SupportedInterfaces$Builder_access$100_f0b76505324612d6_000() throws Throwable {

    java.util.Map retval;
    {
      /* Arrange */
      Object param_0 = Reflector.getInstance("com.amazon.speech.speechlet.SupportedInterfaces$Builder");
      Reflector.setField(param_0, "supportedInterfaces", null);
      Object x0 = param_0;

      /* Act */
      Class<?> c = Reflector.forName("com.amazon.speech.speechlet.SupportedInterfaces$Builder");
      Method m = c.getDeclaredMethod("access$100", Reflector.forName("com.amazon.speech.speechlet.SupportedInterfaces$Builder"));
      m.setAccessible(true);
      retval = (java.util.Map) m.invoke(null, x0);
    }
    {
      /* Assert result */
      Assert.assertEquals(null, retval);
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_speechlet_SupportedInterfaces_builder_6e0e2a9c54065b33_000() throws Throwable {

    Object retval;
    {
      /* Act */
      retval = com.amazon.speech.speechlet.SupportedInterfaces.builder();
    }
    {
      /* Assert result */
      Assert.assertNotNull(retval);
      Assert.assertNotNull(Reflector.getInstanceField(retval, "supportedInterfaces"));

      java.util.HashMap hashMap = new java.util.HashMap();
      Assert.assertEquals(Reflector.getInstanceField(retval, "supportedInterfaces"), hashMap);
      ;
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   * conditional line 68 branch to line 69
   */

  @org.junit.Test
  public void com_amazon_speech_speechlet_SupportedInterfaces_getSupportedInterface_82ad27b22bf2270f_000() throws Throwable {

    Object retval;
    {
      /* Arrange */
      com.amazon.speech.speechlet.SupportedInterfaces param_1 = (com.amazon.speech.speechlet.SupportedInterfaces) Reflector.getInstance("com.amazon.speech.speechlet.SupportedInterfaces");
      Reflector.setField(param_1, "supportedInterfaces", null);
      Class clazz = null;

      /* Act */
      retval = param_1.getSupportedInterface(clazz);
    }
    {
      /* Assert result */
      Assert.assertEquals(null, retval);
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   * conditional line 68 branch to line 72
   * conditional line 72 branch to line 72
   */

  @org.junit.Test
  public void com_amazon_speech_speechlet_SupportedInterfaces_getSupportedInterface_82ad27b22bf2270f_001() throws Throwable {

    Object retval;
    {
      /* Arrange */
      Object param_9 = Reflector.getInstance("java.util.HashMap$Node");
      Reflector.setField(param_9, "value", null);
      Reflector.setField(param_9, "key", null);
      Object param_8 = (Object) Reflector.getInstance("java.lang.Object");
      Object param_7 = Reflector.getInstance("java.util.HashMap$Node");
      Reflector.setField(param_7, "value", param_8);
      Reflector.setField(param_7, "key", null);
      Object param_6 = Reflector.getInstance("java.util.HashMap$Node");
      Reflector.setField(param_6, "value", null);
      Reflector.setField(param_6, "key", null);
      Object param_5 = Reflector.getInstance("java.util.HashMap$Node");
      Reflector.setField(param_5, "value", null);
      Reflector.setField(param_5, "key", null);
      Object [] dynamic_2_array = (Object []) Array.newInstance(Reflector.forName("java.util.HashMap$Node"), 5);
      dynamic_2_array[0] = param_5;
      dynamic_2_array[1] = null;
      dynamic_2_array[2] = param_6;
      dynamic_2_array[3] = param_7;
      dynamic_2_array[4] = param_9;
      Object [] param_3 = dynamic_2_array;

      java.util.HashMap param_2 = new java.util.HashMap();
      param_2.put(null, null);

      com.amazon.speech.speechlet.SupportedInterfaces param_1 = (com.amazon.speech.speechlet.SupportedInterfaces) Reflector.getInstance("com.amazon.speech.speechlet.SupportedInterfaces");
      Reflector.setField(param_1, "supportedInterfaces", param_2);
      Class clazz = null;

      /* Act */
      retval = param_1.getSupportedInterface(clazz);
    }
    {
      /* Assert result */
      Assert.assertEquals(null, retval);
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   * conditional line 55 branch to line 55
   */

  @org.junit.Test
  public void com_amazon_speech_speechlet_SupportedInterfaces_isInterfaceSupported_9c2ec72db9b12392_000() throws Throwable {

    boolean retval;
    {
      /* Arrange */
      com.amazon.speech.speechlet.SupportedInterfaces param_1 = (com.amazon.speech.speechlet.SupportedInterfaces) Reflector.getInstance("com.amazon.speech.speechlet.SupportedInterfaces");
      Reflector.setField(param_1, "supportedInterfaces", null);
      Class clazz = null;

      /* Act */
      retval = param_1.isInterfaceSupported(clazz);
    }
    {
      /* Assert result */
      Assert.assertEquals(false, retval);
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   * conditional line 55 branch to line 55
   */

  @org.junit.Test
  public void com_amazon_speech_speechlet_SupportedInterfaces_isInterfaceSupported_9c2ec72db9b12392_001() throws Throwable {

    boolean retval;
    {
      /* Arrange */
      Object param_7 = (Object) Reflector.getInstance("java.lang.Object");
      Object param_6 = (Object) Reflector.getInstance("java.lang.Object");
      Object param_5 = Reflector.getInstance("java.util.HashMap$Node");
      Reflector.setField(param_5, "value", param_7);
      Reflector.setField(param_5, "key", param_6);
      Object [] dynamic_2_array = (Object []) Array.newInstance(Reflector.forName("java.util.HashMap$Node"), 5);
      dynamic_2_array[0] = param_5;
      Object [] param_3 = dynamic_2_array;

      java.util.HashMap param_2 = new java.util.HashMap();
      java.lang.Object object = (java.lang.Object) Reflector.getInstance("java.lang.Object");
      java.lang.Object object1 = (java.lang.Object) Reflector.getInstance("java.lang.Object");
      param_2.put(object, object1);

      com.amazon.speech.speechlet.SupportedInterfaces param_1 = (com.amazon.speech.speechlet.SupportedInterfaces) Reflector.getInstance("com.amazon.speech.speechlet.SupportedInterfaces");
      Reflector.setField(param_1, "supportedInterfaces", param_2);
      Class clazz = null;

      /* Act */
      retval = param_1.isInterfaceSupported(clazz);
    }
    {
      /* Assert result */
      Assert.assertEquals(false, retval);
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   * conditional line 55 branch to line 55
   */

  @org.junit.Test
  public void com_amazon_speech_speechlet_SupportedInterfaces_isInterfaceSupported_9c2ec72db9b12392_002() throws Throwable {

    boolean retval;
    {
      /* Arrange */
      Object param_5 = Reflector.getInstance("java.util.HashMap$Node");
      Reflector.setField(param_5, "value", null);
      Reflector.setField(param_5, "key", null);
      Object [] dynamic_2_array = (Object []) Array.newInstance(Reflector.forName("java.util.HashMap$Node"), 5);
      dynamic_2_array[0] = param_5;
      Object [] param_3 = dynamic_2_array;

      java.util.HashMap param_2 = new java.util.HashMap();
      param_2.put(null, null);

      com.amazon.speech.speechlet.SupportedInterfaces param_1 = (com.amazon.speech.speechlet.SupportedInterfaces) Reflector.getInstance("com.amazon.speech.speechlet.SupportedInterfaces");
      Reflector.setField(param_1, "supportedInterfaces", param_2);
      Class clazz = null;

      /* Act */
      retval = param_1.isInterfaceSupported(clazz);
    }
    {
      /* Assert result */
      Assert.assertEquals(true, retval);
    }
  }
}
