package com.amazon.speech.speechlet;

import org.junit.Assert;
import org.junit.rules.ExpectedException;
import org.junit.Test;

import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

import com.diffblue.java_testcase.CompareWithFieldList;
import com.diffblue.java_testcase.FieldList;
import com.diffblue.java_testcase.IterAnswer;
import com.diffblue.java_testcase.Reflector;

public class Session_BuilderTest {

  @org.junit.Rule
  public ExpectedException thrown = ExpectedException.none();

  /* testedClasses: Session_Builder */


  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_speechlet_Session$Builder__init__8ee7a15bf2caa829_000() throws Throwable {

    Object instance;
    {
      /* Arrange */
      Object x0 = null;

      /* Act */
      /* Creating object to test constructor */
      Class<?> c = Reflector.forName("com.amazon.speech.speechlet.Session$Builder");
      Constructor<?> ctor = c.getDeclaredConstructor(Reflector.forName("com.amazon.speech.speechlet.Session$1"));
      ctor.setAccessible(true);
      instance = ctor.newInstance(x0);

      /* Method return type is void, or not expected to return */
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_speechlet_Session$Builder__init__a45bfe43ea1a1f73_000() throws Throwable {

    Object instance;
    {
      /* Act */
      /* Creating object to test constructor */
      Class<?> c = Reflector.forName("com.amazon.speech.speechlet.Session$Builder");
      Constructor<?> ctor = c.getDeclaredConstructor();
      ctor.setAccessible(true);
      instance = ctor.newInstance();

      /* Method return type is void, or not expected to return */
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_speechlet_Session$Builder_access$100_60e887f3690a7617_000() throws Throwable {

    boolean retval;
    {
      /* Arrange */
      Object param_0 = Reflector.getInstance("com.amazon.speech.speechlet.Session$Builder");
      Reflector.setField(param_0, "user", null);
      Reflector.setField(param_0, "isNew", false);
      Reflector.setField(param_0, "sessionId", null);
      Reflector.setField(param_0, "application", null);
      Reflector.setField(param_0, "attributes", null);
      Object x0 = param_0;

      /* Act */
      Class<?> c = Reflector.forName("com.amazon.speech.speechlet.Session$Builder");
      Method m = c.getDeclaredMethod("access$100", Reflector.forName("com.amazon.speech.speechlet.Session$Builder"));
      m.setAccessible(true);
      retval = (boolean) m.invoke(null, x0);
    }
    {
      /* Assert result */
      Assert.assertEquals(false, retval);
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_speechlet_Session$Builder_access$200_5cfa960c115797ae_000() throws Throwable {

    String retval;
    {
      /* Arrange */
      Object param_0 = Reflector.getInstance("com.amazon.speech.speechlet.Session$Builder");
      Reflector.setField(param_0, "user", null);
      Reflector.setField(param_0, "isNew", false);
      Reflector.setField(param_0, "sessionId", null);
      Reflector.setField(param_0, "application", null);
      Reflector.setField(param_0, "attributes", null);
      Object x0 = param_0;

      /* Act */
      Class<?> c = Reflector.forName("com.amazon.speech.speechlet.Session$Builder");
      Method m = c.getDeclaredMethod("access$200", Reflector.forName("com.amazon.speech.speechlet.Session$Builder"));
      m.setAccessible(true);
      retval = (String) m.invoke(null, x0);
    }
    {
      /* Assert result */
      Assert.assertEquals(null, retval);
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_speechlet_Session$Builder_access$300_6a1e91757a64650d_000() throws Throwable {

    com.amazon.speech.speechlet.Application retval;
    {
      /* Arrange */
      Object param_0 = Reflector.getInstance("com.amazon.speech.speechlet.Session$Builder");
      Reflector.setField(param_0, "user", null);
      Reflector.setField(param_0, "isNew", false);
      Reflector.setField(param_0, "sessionId", null);
      Reflector.setField(param_0, "application", null);
      Reflector.setField(param_0, "attributes", null);
      Object x0 = param_0;

      /* Act */
      Class<?> c = Reflector.forName("com.amazon.speech.speechlet.Session$Builder");
      Method m = c.getDeclaredMethod("access$300", Reflector.forName("com.amazon.speech.speechlet.Session$Builder"));
      m.setAccessible(true);
      retval = (com.amazon.speech.speechlet.Application) m.invoke(null, x0);
    }
    {
      /* Assert result */
      Assert.assertEquals(null, retval);
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_speechlet_Session$Builder_access$400_5fcce69eca337839_000() throws Throwable {

    java.util.Map retval;
    {
      /* Arrange */
      Object param_0 = Reflector.getInstance("com.amazon.speech.speechlet.Session$Builder");
      Reflector.setField(param_0, "user", null);
      Reflector.setField(param_0, "isNew", false);
      Reflector.setField(param_0, "sessionId", null);
      Reflector.setField(param_0, "application", null);
      Reflector.setField(param_0, "attributes", null);
      Object x0 = param_0;

      /* Act */
      Class<?> c = Reflector.forName("com.amazon.speech.speechlet.Session$Builder");
      Method m = c.getDeclaredMethod("access$400", Reflector.forName("com.amazon.speech.speechlet.Session$Builder"));
      m.setAccessible(true);
      retval = (java.util.Map) m.invoke(null, x0);
    }
    {
      /* Assert result */
      Assert.assertEquals(null, retval);
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_speechlet_Session$Builder_access$500_679068a18d5c4a78_000() throws Throwable {

    com.amazon.speech.speechlet.User retval;
    {
      /* Arrange */
      Object param_0 = Reflector.getInstance("com.amazon.speech.speechlet.Session$Builder");
      Reflector.setField(param_0, "user", null);
      Reflector.setField(param_0, "isNew", false);
      Reflector.setField(param_0, "sessionId", null);
      Reflector.setField(param_0, "application", null);
      Reflector.setField(param_0, "attributes", null);
      Object x0 = param_0;

      /* Act */
      Class<?> c = Reflector.forName("com.amazon.speech.speechlet.Session$Builder");
      Method m = c.getDeclaredMethod("access$500", Reflector.forName("com.amazon.speech.speechlet.Session$Builder"));
      m.setAccessible(true);
      retval = (com.amazon.speech.speechlet.User) m.invoke(null, x0);
    }
    {
      /* Assert result */
      Assert.assertEquals(null, retval);
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_speechlet_Session$Builder_withApplication_ef95f1c8704ac744_000() throws Throwable {

    Object retval;
    {
      /* Arrange */
      String param_2 = "";
      Object param_1 = Reflector.getInstance("com.amazon.speech.speechlet.Session$Builder");
      Reflector.setField(param_1, "user", null);
      Reflector.setField(param_1, "isNew", false);
      Reflector.setField(param_1, "sessionId", param_2);
      Reflector.setField(param_1, "application", null);
      Reflector.setField(param_1, "attributes", null);
      com.amazon.speech.speechlet.Application application = null;

      /* Act */
      Class<?> c = Reflector.forName("com.amazon.speech.speechlet.Session$Builder");
      Method m = c.getDeclaredMethod("withApplication", Reflector.forName("com.amazon.speech.speechlet.Application"));
      m.setAccessible(true);
      retval = (Object) m.invoke(param_1, application);
    }
    {
      /* Assert result */
      Assert.assertNotNull(retval);
      Assert.assertEquals(false, Reflector.getInstanceField(retval, "isNew"));
      Assert.assertNotNull(((String) Reflector.getInstanceField(retval, "sessionId")));
      Assert.assertEquals("", ((String) Reflector.getInstanceField(retval, "sessionId")));
      Assert.assertEquals(null, Reflector.getInstanceField(retval, "application"));
      Assert.assertEquals(null, Reflector.getInstanceField(retval, "attributes"));
      Assert.assertEquals(null, Reflector.getInstanceField(retval, "user"));
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_speechlet_Session$Builder_withAttributes_d7610e30c5abdd2c_000() throws Throwable {

    Object retval;
    {
      /* Arrange */
      String param_2 = "";
      Object param_1 = Reflector.getInstance("com.amazon.speech.speechlet.Session$Builder");
      Reflector.setField(param_1, "user", null);
      Reflector.setField(param_1, "isNew", false);
      Reflector.setField(param_1, "sessionId", param_2);
      Reflector.setField(param_1, "application", null);
      Reflector.setField(param_1, "attributes", null);
      java.util.Map<String, Object> attributes = null;

      /* Act */
      Class<?> c = Reflector.forName("com.amazon.speech.speechlet.Session$Builder");
      Method m = c.getDeclaredMethod("withAttributes", Reflector.forName("java.util.Map"));
      m.setAccessible(true);
      retval = (Object) m.invoke(param_1, attributes);
    }
    {
      /* Assert result */
      Assert.assertNotNull(retval);
      Assert.assertEquals(false, Reflector.getInstanceField(retval, "isNew"));
      Assert.assertNotNull(((String) Reflector.getInstanceField(retval, "sessionId")));
      Assert.assertEquals("", ((String) Reflector.getInstanceField(retval, "sessionId")));
      Assert.assertEquals(null, Reflector.getInstanceField(retval, "application"));
      Assert.assertEquals(null, Reflector.getInstanceField(retval, "attributes"));
      Assert.assertEquals(null, Reflector.getInstanceField(retval, "user"));
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_speechlet_Session$Builder_withIsNew_fb080858c0f70ca4_000() throws Throwable {

    Object retval;
    {
      /* Arrange */
      String param_2 = "";
      Object param_1 = Reflector.getInstance("com.amazon.speech.speechlet.Session$Builder");
      Reflector.setField(param_1, "user", null);
      Reflector.setField(param_1, "isNew", false);
      Reflector.setField(param_1, "sessionId", param_2);
      Reflector.setField(param_1, "application", null);
      Reflector.setField(param_1, "attributes", null);
      boolean isNew = false;

      /* Act */
      Class<?> c = Reflector.forName("com.amazon.speech.speechlet.Session$Builder");
      Method m = c.getDeclaredMethod("withIsNew", Reflector.forName("boolean"));
      m.setAccessible(true);
      retval = (Object) m.invoke(param_1, isNew);
    }
    {
      /* Assert result */
      Assert.assertNotNull(retval);
      Assert.assertEquals(false, Reflector.getInstanceField(retval, "isNew"));
      Assert.assertNotNull(((String) Reflector.getInstanceField(retval, "sessionId")));
      Assert.assertEquals("", ((String) Reflector.getInstanceField(retval, "sessionId")));
      Assert.assertEquals(null, Reflector.getInstanceField(retval, "application"));
      Assert.assertEquals(null, Reflector.getInstanceField(retval, "attributes"));
      Assert.assertEquals(null, Reflector.getInstanceField(retval, "user"));
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_speechlet_Session$Builder_withSessionId_827b7268a933ccf9_000() throws Throwable {

    Object retval;
    {
      /* Arrange */
      String param_2 = "";
      Object param_1 = Reflector.getInstance("com.amazon.speech.speechlet.Session$Builder");
      Reflector.setField(param_1, "user", null);
      Reflector.setField(param_1, "isNew", false);
      Reflector.setField(param_1, "sessionId", param_2);
      Reflector.setField(param_1, "application", null);
      Reflector.setField(param_1, "attributes", null);
      String sessionId = null;

      /* Act */
      Class<?> c = Reflector.forName("com.amazon.speech.speechlet.Session$Builder");
      Method m = c.getDeclaredMethod("withSessionId", Reflector.forName("java.lang.String"));
      m.setAccessible(true);
      retval = (Object) m.invoke(param_1, sessionId);
    }
    {
      /* Assert result */
      Assert.assertNotNull(retval);
      Assert.assertEquals(false, Reflector.getInstanceField(retval, "isNew"));
      Assert.assertEquals(null, ((String) Reflector.getInstanceField(retval, "sessionId")));
      Assert.assertEquals(null, Reflector.getInstanceField(retval, "application"));
      Assert.assertEquals(null, Reflector.getInstanceField(retval, "attributes"));
      Assert.assertEquals(null, Reflector.getInstanceField(retval, "user"));
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_speechlet_Session$Builder_withUser_cc85988c7bf17ca0_000() throws Throwable {

    Object retval;
    {
      /* Arrange */
      String param_2 = "";
      Object param_1 = Reflector.getInstance("com.amazon.speech.speechlet.Session$Builder");
      Reflector.setField(param_1, "user", null);
      Reflector.setField(param_1, "isNew", false);
      Reflector.setField(param_1, "sessionId", param_2);
      Reflector.setField(param_1, "application", null);
      Reflector.setField(param_1, "attributes", null);
      com.amazon.speech.speechlet.User user = null;

      /* Act */
      Class<?> c = Reflector.forName("com.amazon.speech.speechlet.Session$Builder");
      Method m = c.getDeclaredMethod("withUser", Reflector.forName("com.amazon.speech.speechlet.User"));
      m.setAccessible(true);
      retval = (Object) m.invoke(param_1, user);
    }
    {
      /* Assert result */
      Assert.assertNotNull(retval);
      Assert.assertEquals(false, Reflector.getInstanceField(retval, "isNew"));
      Assert.assertNotNull(((String) Reflector.getInstanceField(retval, "sessionId")));
      Assert.assertEquals("", ((String) Reflector.getInstanceField(retval, "sessionId")));
      Assert.assertEquals(null, Reflector.getInstanceField(retval, "application"));
      Assert.assertEquals(null, Reflector.getInstanceField(retval, "attributes"));
      Assert.assertEquals(null, Reflector.getInstanceField(retval, "user"));
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   * conditional line 130 branch to line 133
   */

  @org.junit.Test
  public void com_amazon_speech_speechlet_Session__init__683b9f3d009d3852_000() throws Throwable {

    Object instance;
    {
      /* Arrange */
      boolean isNew = false;
      String sessionId = null;
      com.amazon.speech.speechlet.Application application = null;
      java.util.Map<String, Object> attributes = null;
      com.amazon.speech.speechlet.User user = null;

      /* Act */
      /* Creating object to test constructor */
      Class<?> c = Reflector.forName("com.amazon.speech.speechlet.Session");
      Constructor<?> ctor = c.getDeclaredConstructor(Reflector.forName("boolean"), Reflector.forName("java.lang.String"), Reflector.forName("com.amazon.speech.speechlet.Application"), Reflector.forName("java.util.Map"), Reflector.forName("com.amazon.speech.speechlet.User"));
      ctor.setAccessible(true);
      instance = ctor.newInstance(isNew, sessionId, application, attributes, user);

      /* Method return type is void, or not expected to return */
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   * conditional line 130 branch to line 131
   */

  @org.junit.Test
  public void com_amazon_speech_speechlet_Session__init__683b9f3d009d3852_001() throws Throwable {

    Object instance;
    {
      /* Arrange */
      boolean isNew = false;
      String sessionId = null;
      com.amazon.speech.speechlet.Application application = null;
      Object [] dynamic_38_array = (Object []) Array.newInstance(Reflector.forName("java.util.HashMap$Node"), 5);
      Object [] param_6 = dynamic_38_array;

      java.util.HashMap param_5 = new java.util.HashMap();

      java.util.Map<String, Object> attributes = param_5;
      com.amazon.speech.speechlet.User user = null;

      /* Act */
      /* Creating object to test constructor */
      Class<?> c = Reflector.forName("com.amazon.speech.speechlet.Session");
      Constructor<?> ctor = c.getDeclaredConstructor(Reflector.forName("boolean"), Reflector.forName("java.lang.String"), Reflector.forName("com.amazon.speech.speechlet.Application"), Reflector.forName("java.util.Map"), Reflector.forName("com.amazon.speech.speechlet.User"));
      ctor.setAccessible(true);
      instance = ctor.newInstance(isNew, sessionId, application, attributes, user);

      /* Method return type is void, or not expected to return */
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_speechlet_Session__init__7069e598d87e59f8_000() throws Throwable {

    Object instance;
    {
      /* Arrange */
      Object param_2 = Reflector.getInstance("com.amazon.speech.speechlet.Session$Builder");
      Reflector.setField(param_2, "user", null);
      Reflector.setField(param_2, "isNew", false);
      Reflector.setField(param_2, "sessionId", null);
      Reflector.setField(param_2, "application", null);
      Reflector.setField(param_2, "attributes", null);
      Object x0 = param_2;
      Object x1 = null;

      /* Act */
      /* Creating object to test constructor */
      Class<?> c = Reflector.forName("com.amazon.speech.speechlet.Session");
      Constructor<?> ctor = c.getDeclaredConstructor(Reflector.forName("com.amazon.speech.speechlet.Session$Builder"), Reflector.forName("com.amazon.speech.speechlet.Session$1"));
      ctor.setAccessible(true);
      instance = ctor.newInstance(x0, x1);

      /* Method return type is void, or not expected to return */
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_speechlet_Session__init__878383839f742a35_000() throws Throwable {

    Object instance;
    {
      /* Arrange */
      Object param_0 = Reflector.getInstance("com.amazon.speech.speechlet.Session$Builder");
      Reflector.setField(param_0, "user", null);
      Reflector.setField(param_0, "isNew", false);
      Reflector.setField(param_0, "sessionId", null);
      Reflector.setField(param_0, "application", null);
      Reflector.setField(param_0, "attributes", null);
      Object builder = param_0;

      /* Act */
      /* Creating object to test constructor */
      Class<?> c = Reflector.forName("com.amazon.speech.speechlet.Session");
      Constructor<?> ctor = c.getDeclaredConstructor(Reflector.forName("com.amazon.speech.speechlet.Session$Builder"));
      ctor.setAccessible(true);
      instance = ctor.newInstance(builder);

      /* Method return type is void, or not expected to return */
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_speechlet_Session__init__fa3502e37463bd35_000() throws Throwable {

    Object instance;
    {
      /* Act */
      /* Creating object to test constructor */
      Class<?> c = Reflector.forName("com.amazon.speech.speechlet.Session");
      Constructor<?> ctor = c.getDeclaredConstructor();
      ctor.setAccessible(true);
      instance = ctor.newInstance();

      /* Method return type is void, or not expected to return */
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_speechlet_Session_builder_db8220465bb4a95c_000() throws Throwable {

    Object retval;
    {
      /* Act */
      retval = com.amazon.speech.speechlet.Session.builder();
    }
    {
      /* Assert result */
      Assert.assertNotNull(retval);
      Assert.assertEquals(false, Reflector.getInstanceField(retval, "isNew"));
      Assert.assertEquals(null, ((String) Reflector.getInstanceField(retval, "sessionId")));
      Assert.assertEquals(null, Reflector.getInstanceField(retval, "application"));
      Assert.assertNotNull(Reflector.getInstanceField(retval, "attributes"));

      java.util.HashMap hashMap = new java.util.HashMap();
      Assert.assertEquals(Reflector.getInstanceField(retval, "attributes"), hashMap);
      ;
      Assert.assertEquals(null, Reflector.getInstanceField(retval, "user"));
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_speechlet_Session_getApplication_cb775b224b3290c3_000() throws Throwable {

    com.amazon.speech.speechlet.Application retval;
    {
      /* Arrange */
      String param_1 = "";
      com.amazon.speech.speechlet.Session param_2 = (com.amazon.speech.speechlet.Session) Reflector.getInstance("com.amazon.speech.speechlet.Session");
      Reflector.setField(param_2, "user", null);
      Reflector.setField(param_2, "isNew", false);
      Reflector.setField(param_2, "sessionId", param_1);
      Reflector.setField(param_2, "application", null);
      Reflector.setField(param_2, "attributes", null);

      /* Act */
      retval = param_2.getApplication();
    }
    {
      /* Assert result */
      Assert.assertEquals(null, retval);
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   * conditional line 197 branch to line 197
   */

  @org.junit.Test
  public void com_amazon_speech_speechlet_Session_getAttribute_514ef8c9b3c65d34_000() throws Throwable {

    Object retval;
    {
      /* Arrange */
      Object param_7 = Reflector.getInstance("java.util.HashMap$Node");
      Reflector.setField(param_7, "value", null);
      Reflector.setField(param_7, "key", null);
      Object [] dynamic_6_array = (Object []) Array.newInstance(Reflector.forName("java.util.HashMap$Node"), 5);
      dynamic_6_array[0] = param_7;
      dynamic_6_array[1] = null;
      dynamic_6_array[2] = null;
      dynamic_6_array[3] = null;
      Object [] param_5 = dynamic_6_array;

      java.util.HashMap param_4 = new java.util.HashMap();
      param_4.put(null, null);

      String param_2 = "!!";
      com.amazon.speech.speechlet.Session param_1 = (com.amazon.speech.speechlet.Session) Reflector.getInstance("com.amazon.speech.speechlet.Session");
      Reflector.setField(param_1, "user", null);
      Reflector.setField(param_1, "isNew", false);
      Reflector.setField(param_1, "sessionId", param_2);
      Reflector.setField(param_1, "application", null);
      Reflector.setField(param_1, "attributes", param_4);
      String name = null;

      /* Act */
      retval = param_1.getAttribute(name);
    }
    {
      /* Assert result */
      Assert.assertEquals(null, retval);
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_speechlet_Session_getAttributes_a582f5aa0490a61_000() throws Throwable {

    java.util.Map<String, Object> retval;
    {
      /* Arrange */
      String param_1 = "";
      com.amazon.speech.speechlet.Session param_2 = (com.amazon.speech.speechlet.Session) Reflector.getInstance("com.amazon.speech.speechlet.Session");
      Reflector.setField(param_2, "user", null);
      Reflector.setField(param_2, "isNew", false);
      Reflector.setField(param_2, "sessionId", param_1);
      Reflector.setField(param_2, "application", null);
      Reflector.setField(param_2, "attributes", null);

      /* Act */
      retval = param_2.getAttributes();
    }
    {
      /* Assert result */
      Assert.assertEquals(null, retval);
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_speechlet_Session_getSessionId_8c34f0cf7f5ee463_000() throws Throwable {

    String retval;
    {
      /* Arrange */
      com.amazon.speech.speechlet.Session param_0 = (com.amazon.speech.speechlet.Session) Reflector.getInstance("com.amazon.speech.speechlet.Session");
      Reflector.setField(param_0, "user", null);
      Reflector.setField(param_0, "isNew", false);
      Reflector.setField(param_0, "sessionId", null);
      Reflector.setField(param_0, "application", null);
      Reflector.setField(param_0, "attributes", null);

      /* Act */
      retval = param_0.getSessionId();
    }
    {
      /* Assert result */
      Assert.assertEquals(null, retval);
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_speechlet_Session_getUser_e9c6567d228f4273_000() throws Throwable {

    com.amazon.speech.speechlet.User retval;
    {
      /* Arrange */
      String param_1 = "";
      com.amazon.speech.speechlet.Session param_2 = (com.amazon.speech.speechlet.Session) Reflector.getInstance("com.amazon.speech.speechlet.Session");
      Reflector.setField(param_2, "user", null);
      Reflector.setField(param_2, "isNew", false);
      Reflector.setField(param_2, "sessionId", param_1);
      Reflector.setField(param_2, "application", null);
      Reflector.setField(param_2, "attributes", null);

      /* Act */
      retval = param_2.getUser();
    }
    {
      /* Assert result */
      Assert.assertEquals(null, retval);
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_speechlet_Session_isNew_5d7a6463ad0174a3_000() throws Throwable {

    boolean retval;
    {
      /* Arrange */
      String param_1 = "";
      com.amazon.speech.speechlet.Session param_2 = (com.amazon.speech.speechlet.Session) Reflector.getInstance("com.amazon.speech.speechlet.Session");
      Reflector.setField(param_2, "user", null);
      Reflector.setField(param_2, "isNew", false);
      Reflector.setField(param_2, "sessionId", param_1);
      Reflector.setField(param_2, "application", null);
      Reflector.setField(param_2, "attributes", null);

      /* Act */
      retval = param_2.isNew();
    }
    {
      /* Assert result */
      Assert.assertEquals(false, retval);
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   * conditional line 219 branch to line 219
   */

  @org.junit.Test
  public void com_amazon_speech_speechlet_Session_removeAttribute_e070c62ee388a37e_000() throws Throwable {

    {
      /* Arrange */
      Object [] dynamic_6_array = (Object []) Array.newInstance(Reflector.forName("java.util.HashMap$Node"), 5);
      Object [] param_7 = dynamic_6_array;

      java.util.HashMap param_6 = new java.util.HashMap();

      String param_4 = "!";
      com.amazon.speech.speechlet.Session param_3 = (com.amazon.speech.speechlet.Session) Reflector.getInstance("com.amazon.speech.speechlet.Session");
      Reflector.setField(param_3, "user", null);
      Reflector.setField(param_3, "isNew", false);
      Reflector.setField(param_3, "sessionId", param_4);
      Reflector.setField(param_3, "application", null);
      Reflector.setField(param_3, "attributes", param_6);
      String param_1 = "D@@";
      String name = param_1;

      /* Act */
      param_3.removeAttribute(name);

      /* Method return type is void, or not expected to return */
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   * conditional line 209 branch to line 209
   */

  @org.junit.Test
  public void com_amazon_speech_speechlet_Session_setAttribute_f8da779a956838a0_000() throws Throwable {

    {
      /* Arrange */
      String param_2 = "\"\"\"\"\"\"\"0  ~,J&bd&d111111111111111111111111111111111111111\"e%p!}$";
      Object param_3 = Reflector.getInstance("java.util.HashMap$Node");
      Reflector.setField(param_3, "value", null);
      Reflector.setField(param_3, "key", param_2);
      Object param_4 = Reflector.getInstance("java.util.HashMap$Node");
      Reflector.setField(param_4, "value", null);
      Reflector.setField(param_4, "key", null);
      String param_6 = "";
      Object param_7 = Reflector.getInstance("java.util.HashMap$Node");
      Reflector.setField(param_7, "value", null);
      Reflector.setField(param_7, "key", param_6);
      Object [] dynamic_6_array = (Object []) Array.newInstance(Reflector.forName("java.util.HashMap$Node"), 5);
      dynamic_6_array[0] = null;
      dynamic_6_array[1] = param_7;
      dynamic_6_array[2] = null;
      dynamic_6_array[3] = param_4;
      dynamic_6_array[4] = param_3;
      Object [] param_9 = dynamic_6_array;

      java.util.HashMap param_10 = new java.util.HashMap();

      String param_12 = "!!";
      com.amazon.speech.speechlet.Session param_13 = (com.amazon.speech.speechlet.Session) Reflector.getInstance("com.amazon.speech.speechlet.Session");
      Reflector.setField(param_13, "user", null);
      Reflector.setField(param_13, "isNew", false);
      Reflector.setField(param_13, "sessionId", param_12);
      Reflector.setField(param_13, "application", null);
      Reflector.setField(param_13, "attributes", param_10);
      String name = null;
      Object value = null;

      /* Act */
      param_13.setAttribute(name, value);

      /* Assert side effects */
      Assert.assertEquals(1, Reflector.getInstanceField(param_10, "size"));
      Assert.assertEquals(1, Reflector.getInstanceField(param_10, "modCount"));
    }
  }
}
