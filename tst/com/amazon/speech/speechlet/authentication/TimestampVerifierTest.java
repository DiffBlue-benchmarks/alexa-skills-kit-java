package com.amazon.speech.speechlet.authentication;

import org.junit.Assert;
import org.junit.rules.ExpectedException;
import org.junit.Test;

import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

import com.diffblue.java_testcase.CompareWithFieldList;
import com.diffblue.java_testcase.FieldList;
import com.diffblue.java_testcase.IterAnswer;
import com.diffblue.java_testcase.Reflector;

public class TimestampVerifierTest {

  @org.junit.Rule
  public ExpectedException thrown = ExpectedException.none();

  /* testedClasses: TimestampVerifier */


  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   * conditional line 39 branch to line 40
   */

  @org.junit.Test
  public void com_amazon_speech_speechlet_authentication_TimestampVerifier__init__8ff6d306d551c1c7_001() throws Throwable {

    com.amazon.speech.speechlet.authentication.TimestampVerifier instance;
    {
      /* Arrange */
      long tolerance = -9151314442816847872L;
      java.util.concurrent.TimeUnit param_0 = (java.util.concurrent.TimeUnit) Reflector.getInstance("java.util.concurrent.TimeUnit");
      java.util.concurrent.TimeUnit unit = param_0;

      /* Act */
      /* Creating object to test constructor */
      thrown.expect(IllegalArgumentException.class);
      instance = new com.amazon.speech.speechlet.authentication.TimestampVerifier(tolerance, unit);

      /* Method return type is void, or not expected to return */
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   * conditional line 55 branch to line 59
   */

  @org.junit.Test
  public void com_amazon_speech_speechlet_authentication_TimestampVerifier_isValid_3b7e1d375c497fe0_002() throws Throwable {

    boolean retval;
    {
      /* Arrange */
      com.amazon.speech.speechlet.authentication.TimestampVerifier param_1 = (com.amazon.speech.speechlet.authentication.TimestampVerifier) Reflector.getInstance("com.amazon.speech.speechlet.authentication.TimestampVerifier");
      Reflector.setField(param_1, "toleranceInMilliseconds", -9223372036854775808L);
      java.util.Date timestamp = null;

      /* Act */
      retval = param_1.isValid(timestamp);
    }
    {
      /* Assert result */
      Assert.assertEquals(false, retval);
    }
  }
}
