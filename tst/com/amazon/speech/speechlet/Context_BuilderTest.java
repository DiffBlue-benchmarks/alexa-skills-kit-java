package com.amazon.speech.speechlet;

import org.junit.Assert;
import org.junit.rules.ExpectedException;
import org.junit.Test;

import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

import com.diffblue.java_testcase.CompareWithFieldList;
import com.diffblue.java_testcase.FieldList;
import com.diffblue.java_testcase.IterAnswer;
import com.diffblue.java_testcase.Reflector;

public class Context_BuilderTest {

  @org.junit.Rule
  public ExpectedException thrown = ExpectedException.none();

  /* testedClasses: Context_Builder */


  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_speechlet_Context$Builder__init__11734e0f066cc4c7_000() throws Throwable {

    Object instance;
    {
      /* Act */
      /* Creating object to test constructor */
      Class<?> c = Reflector.forName("com.amazon.speech.speechlet.Context$Builder");
      Constructor<?> ctor = c.getDeclaredConstructor();
      ctor.setAccessible(true);
      instance = ctor.newInstance();

      /* Method return type is void, or not expected to return */
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_speechlet_Context$Builder__init__acdba99177c77598_000() throws Throwable {

    Object instance;
    {
      /* Arrange */
      Object x0 = null;

      /* Act */
      /* Creating object to test constructor */
      Class<?> c = Reflector.forName("com.amazon.speech.speechlet.Context$Builder");
      Constructor<?> ctor = c.getDeclaredConstructor(Reflector.forName("com.amazon.speech.speechlet.Context$1"));
      ctor.setAccessible(true);
      instance = ctor.newInstance(x0);

      /* Method return type is void, or not expected to return */
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_speechlet_Context$Builder_access$100_a9b144e5e613d945_000() throws Throwable {

    java.util.Map retval;
    {
      /* Arrange */
      Object param_0 = Reflector.getInstance("com.amazon.speech.speechlet.Context$Builder");
      Reflector.setField(param_0, "states", null);
      Object x0 = param_0;

      /* Act */
      Class<?> c = Reflector.forName("com.amazon.speech.speechlet.Context$Builder");
      Method m = c.getDeclaredMethod("access$100", Reflector.forName("com.amazon.speech.speechlet.Context$Builder"));
      m.setAccessible(true);
      retval = (java.util.Map) m.invoke(null, x0);
    }
    {
      /* Assert result */
      Assert.assertEquals(null, retval);
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_speechlet_Context_builder_975217380d59d3df_000() throws Throwable {

    Object retval;
    {
      /* Act */
      retval = com.amazon.speech.speechlet.Context.builder();
    }
    {
      /* Assert result */
      Assert.assertNotNull(retval);
      Assert.assertNotNull(Reflector.getInstanceField(retval, "states"));

      java.util.HashMap hashMap = new java.util.HashMap();
      Assert.assertEquals(Reflector.getInstanceField(retval, "states"), hashMap);
      ;
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   * conditional line 74 branch to line 79
   * conditional line 79 branch to line 79
   */

  @org.junit.Test
  public void com_amazon_speech_speechlet_Context_getState_47025c0f40f3d33b_001() throws Throwable {

    Object retval;
    {
      /* Arrange */
      Object param_1 = Reflector.getInstance("java.util.HashMap$Node");
      Reflector.setField(param_1, "value", null);
      Reflector.setField(param_1, "key", null);
      Object param_2 = (Object) Reflector.getInstance("java.lang.Object");
      Object param_3 = Reflector.getInstance("java.util.HashMap$Node");
      Reflector.setField(param_3, "value", null);
      Reflector.setField(param_3, "key", param_2);
      Object param_4 = (Object) Reflector.getInstance("java.lang.Object");
      Object param_5 = Reflector.getInstance("java.util.HashMap$Node");
      Reflector.setField(param_5, "value", null);
      Reflector.setField(param_5, "key", param_4);
      Object param_6 = Reflector.getInstance("java.util.HashMap$Node");
      Reflector.setField(param_6, "value", null);
      Reflector.setField(param_6, "key", null);
      Object [] dynamic_2_array = (Object []) Array.newInstance(Reflector.forName("java.util.HashMap$Node"), 5);
      dynamic_2_array[0] = param_6;
      dynamic_2_array[1] = param_5;
      dynamic_2_array[2] = null;
      dynamic_2_array[3] = param_3;
      dynamic_2_array[4] = param_1;
      Object [] param_8 = dynamic_2_array;

      java.util.HashMap param_9 = new java.util.HashMap();
      param_9.put(null, null);

      com.amazon.speech.speechlet.Context param_10 = (com.amazon.speech.speechlet.Context) Reflector.getInstance("com.amazon.speech.speechlet.Context");
      Reflector.setField(param_10, "states", param_9);
      Class interfaceClass = null;
      Class castClass = null;

      /* Act */
      retval = param_10.getState(interfaceClass, castClass);
    }
    {
      /* Assert result */
      Assert.assertEquals(null, retval);
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   * conditional line 55 branch to line 55
   */

  @org.junit.Test
  public void com_amazon_speech_speechlet_Context_hasState_f90dddeea8f56c5a_000() throws Throwable {

    boolean retval;
    {
      /* Arrange */
      com.amazon.speech.speechlet.Context param_1 = (com.amazon.speech.speechlet.Context) Reflector.getInstance("com.amazon.speech.speechlet.Context");
      Reflector.setField(param_1, "states", null);
      Class clazz = null;

      /* Act */
      retval = param_1.hasState(clazz);
    }
    {
      /* Assert result */
      Assert.assertEquals(false, retval);
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   * conditional line 55 branch to line 55
   */

  @org.junit.Test
  public void com_amazon_speech_speechlet_Context_hasState_f90dddeea8f56c5a_001() throws Throwable {

    boolean retval;
    {
      /* Arrange */
      Object [] dynamic_2_array = (Object []) Array.newInstance(Reflector.forName("java.util.HashMap$Node"), 5);
      dynamic_2_array[0] = null;
      dynamic_2_array[1] = null;
      dynamic_2_array[2] = null;
      dynamic_2_array[3] = null;
      Object [] param_3 = dynamic_2_array;

      java.util.HashMap param_2 = new java.util.HashMap();

      com.amazon.speech.speechlet.Context param_1 = (com.amazon.speech.speechlet.Context) Reflector.getInstance("com.amazon.speech.speechlet.Context");
      Reflector.setField(param_1, "states", param_2);
      Class clazz = null;

      /* Act */
      retval = param_1.hasState(clazz);
    }
    {
      /* Assert result */
      Assert.assertEquals(false, retval);
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   * conditional line 55 branch to line 55
   */

  @org.junit.Test
  public void com_amazon_speech_speechlet_Context_hasState_f90dddeea8f56c5a_002() throws Throwable {

    boolean retval;
    {
      /* Arrange */
      Object param_9 = Reflector.getInstance("java.util.HashMap$Node");
      Reflector.setField(param_9, "value", null);
      Reflector.setField(param_9, "key", null);
      Object param_8 = (Object) Reflector.getInstance("java.lang.Object");
      Object param_7 = Reflector.getInstance("java.util.HashMap$Node");
      Reflector.setField(param_7, "value", param_8);
      Reflector.setField(param_7, "key", null);
      Object param_6 = (Object) Reflector.getInstance("java.lang.Object");
      Object param_5 = Reflector.getInstance("java.util.HashMap$Node");
      Reflector.setField(param_5, "value", param_6);
      Reflector.setField(param_5, "key", null);
      Object [] dynamic_2_array = (Object []) Array.newInstance(Reflector.forName("java.util.HashMap$Node"), 5);
      dynamic_2_array[0] = param_5;
      dynamic_2_array[1] = param_7;
      dynamic_2_array[2] = null;
      dynamic_2_array[3] = param_9;
      Object [] param_3 = dynamic_2_array;

      java.util.HashMap param_2 = new java.util.HashMap();
      java.lang.Object object = (java.lang.Object) Reflector.getInstance("java.lang.Object");
      param_2.put(null, object);

      com.amazon.speech.speechlet.Context param_1 = (com.amazon.speech.speechlet.Context) Reflector.getInstance("com.amazon.speech.speechlet.Context");
      Reflector.setField(param_1, "states", param_2);
      Class clazz = null;

      /* Act */
      retval = param_1.hasState(clazz);
    }
    {
      /* Assert result */
      Assert.assertEquals(true, retval);
    }
  }
}
