package com.amazon.speech.speechlet;

import org.junit.Assert;
import org.junit.rules.ExpectedException;
import org.junit.Test;

import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

import com.diffblue.java_testcase.CompareWithFieldList;
import com.diffblue.java_testcase.FieldList;
import com.diffblue.java_testcase.IterAnswer;
import com.diffblue.java_testcase.Reflector;

public class SpeechletRequestHandlerTest {

  @org.junit.Rule
  public ExpectedException thrown = ExpectedException.none();

  /* testedClasses: SpeechletRequestHandler */


  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_speechlet_SpeechletRequestHandler__init__89d7c4a5bc9c1b61_000() throws Throwable {

    Object instance;
    {
      /* Arrange */
      java.util.List<com.amazon.speech.speechlet.verifier.SpeechletRequestEnvelopeVerifier> requestEnvelopeVerifiers = null;
      java.util.List<com.amazon.speech.speechlet.verifier.SpeechletRequestVerifier> requestVerifiers = null;
      java.util.List<com.amazon.speech.speechlet.verifier.SpeechletResponseVerifier> responseVerifiers = null;

      /* Act */
      /* Creating object to test constructor */
      Class<?> c = Reflector.forName("com.amazon.speech.speechlet.SpeechletRequestHandler");
      Constructor<?> ctor = c.getDeclaredConstructor(Reflector.forName("java.util.List"), Reflector.forName("java.util.List"), Reflector.forName("java.util.List"));
      ctor.setAccessible(true);
      instance = ctor.newInstance(requestEnvelopeVerifiers, requestVerifiers, responseVerifiers);

      /* Method return type is void, or not expected to return */
    }
  }
}
