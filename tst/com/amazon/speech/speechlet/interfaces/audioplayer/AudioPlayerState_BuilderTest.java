package com.amazon.speech.speechlet.interfaces.audioplayer;

import org.junit.Assert;
import org.junit.rules.ExpectedException;
import org.junit.Test;

import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

import com.diffblue.java_testcase.CompareWithFieldList;
import com.diffblue.java_testcase.FieldList;
import com.diffblue.java_testcase.IterAnswer;
import com.diffblue.java_testcase.Reflector;

public class AudioPlayerState_BuilderTest {

  @org.junit.Rule
  public ExpectedException thrown = ExpectedException.none();

  /* testedClasses: AudioPlayerState_Builder */


  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_speechlet_interfaces_audioplayer_AudioPlayerState$Builder__init__230c72aeca0732be_000() throws Throwable {

    Object instance;
    {
      /* Arrange */
      Object x0 = null;

      /* Act */
      /* Creating object to test constructor */
      Class<?> c = Reflector.forName("com.amazon.speech.speechlet.interfaces.audioplayer.AudioPlayerState$Builder");
      Constructor<?> ctor = c.getDeclaredConstructor(Reflector.forName("com.amazon.speech.speechlet.interfaces.audioplayer.AudioPlayerState$1"));
      ctor.setAccessible(true);
      instance = ctor.newInstance(x0);

      /* Method return type is void, or not expected to return */
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_speechlet_interfaces_audioplayer_AudioPlayerState$Builder__init__d597729c745e30e1_000() throws Throwable {

    Object instance;
    {
      /* Act */
      /* Creating object to test constructor */
      Class<?> c = Reflector.forName("com.amazon.speech.speechlet.interfaces.audioplayer.AudioPlayerState$Builder");
      Constructor<?> ctor = c.getDeclaredConstructor();
      ctor.setAccessible(true);
      instance = ctor.newInstance();

      /* Method return type is void, or not expected to return */
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_speechlet_interfaces_audioplayer_AudioPlayerState$Builder_access$100_fdf53f1e8cbc3264_000() throws Throwable {

    Long retval;
    {
      /* Arrange */
      Object param_0 = Reflector.getInstance("com.amazon.speech.speechlet.interfaces.audioplayer.AudioPlayerState$Builder");
      Reflector.setField(param_0, "playerActivity", null);
      Reflector.setField(param_0, "token", null);
      Reflector.setField(param_0, "offsetInMilliseconds", null);
      Object x0 = param_0;

      /* Act */
      Class<?> c = Reflector.forName("com.amazon.speech.speechlet.interfaces.audioplayer.AudioPlayerState$Builder");
      Method m = c.getDeclaredMethod("access$100", Reflector.forName("com.amazon.speech.speechlet.interfaces.audioplayer.AudioPlayerState$Builder"));
      m.setAccessible(true);
      retval = (Long) m.invoke(null, x0);
    }
    {
      /* Assert result */
      Assert.assertEquals(null, retval);
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_speechlet_interfaces_audioplayer_AudioPlayerState$Builder_access$200_fc26aadc58362a64_000() throws Throwable {

    String retval;
    {
      /* Arrange */
      Object param_0 = Reflector.getInstance("com.amazon.speech.speechlet.interfaces.audioplayer.AudioPlayerState$Builder");
      Reflector.setField(param_0, "playerActivity", null);
      Reflector.setField(param_0, "token", null);
      Reflector.setField(param_0, "offsetInMilliseconds", null);
      Object x0 = param_0;

      /* Act */
      Class<?> c = Reflector.forName("com.amazon.speech.speechlet.interfaces.audioplayer.AudioPlayerState$Builder");
      Method m = c.getDeclaredMethod("access$200", Reflector.forName("com.amazon.speech.speechlet.interfaces.audioplayer.AudioPlayerState$Builder"));
      m.setAccessible(true);
      retval = (String) m.invoke(null, x0);
    }
    {
      /* Assert result */
      Assert.assertEquals(null, retval);
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_speechlet_interfaces_audioplayer_AudioPlayerState$Builder_access$300_c2fcde827c6fb80b_000() throws Throwable {

    com.amazon.speech.speechlet.interfaces.audioplayer.PlayerActivity retval;
    {
      /* Arrange */
      Object param_0 = Reflector.getInstance("com.amazon.speech.speechlet.interfaces.audioplayer.AudioPlayerState$Builder");
      Reflector.setField(param_0, "playerActivity", null);
      Reflector.setField(param_0, "token", null);
      Reflector.setField(param_0, "offsetInMilliseconds", null);
      Object x0 = param_0;

      /* Act */
      Class<?> c = Reflector.forName("com.amazon.speech.speechlet.interfaces.audioplayer.AudioPlayerState$Builder");
      Method m = c.getDeclaredMethod("access$300", Reflector.forName("com.amazon.speech.speechlet.interfaces.audioplayer.AudioPlayerState$Builder"));
      m.setAccessible(true);
      retval = (com.amazon.speech.speechlet.interfaces.audioplayer.PlayerActivity) m.invoke(null, x0);
    }
    {
      /* Assert result */
      Assert.assertEquals(null, retval);
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_speechlet_interfaces_audioplayer_AudioPlayerState$Builder_build_85264eb7cbf945a7_000() throws Throwable {

    com.amazon.speech.speechlet.interfaces.audioplayer.AudioPlayerState retval;
    {
      /* Arrange */
      String param_1 = "";
      Object param_2 = Reflector.getInstance("com.amazon.speech.speechlet.interfaces.audioplayer.AudioPlayerState$Builder");
      Reflector.setField(param_2, "playerActivity", null);
      Reflector.setField(param_2, "token", param_1);
      Reflector.setField(param_2, "offsetInMilliseconds", null);

      /* Act */
      Class<?> c = Reflector.forName("com.amazon.speech.speechlet.interfaces.audioplayer.AudioPlayerState$Builder");
      Method m = c.getDeclaredMethod("build");
      m.setAccessible(true);
      retval = (com.amazon.speech.speechlet.interfaces.audioplayer.AudioPlayerState) m.invoke(param_2);
    }
    {
      /* Assert result */
      Assert.assertNotNull(retval);
      Assert.assertEquals(null, Reflector.getInstanceField(retval, "offsetInMilliseconds"));
      Assert.assertNotNull(((String) Reflector.getInstanceField(retval, "token")));
      Assert.assertEquals("", ((String) Reflector.getInstanceField(retval, "token")));
      Assert.assertEquals(null, Reflector.getInstanceField(retval, "playerActivity"));
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_speechlet_interfaces_audioplayer_AudioPlayerState$Builder_withOffsetInMilliseconds_fcc21573cefeb658_000() throws Throwable {

    Object retval;
    {
      /* Arrange */
      String param_2 = "";
      Object param_1 = Reflector.getInstance("com.amazon.speech.speechlet.interfaces.audioplayer.AudioPlayerState$Builder");
      Reflector.setField(param_1, "playerActivity", null);
      Reflector.setField(param_1, "token", param_2);
      Reflector.setField(param_1, "offsetInMilliseconds", null);
      long offsetInMilliseconds = 0L;

      /* Act */
      Class<?> c = Reflector.forName("com.amazon.speech.speechlet.interfaces.audioplayer.AudioPlayerState$Builder");
      Method m = c.getDeclaredMethod("withOffsetInMilliseconds", Reflector.forName("long"));
      m.setAccessible(true);
      retval = (Object) m.invoke(param_1, offsetInMilliseconds);
    }
    {
      /* Assert result */
      Assert.assertNotNull(retval);
      Assert.assertNotNull(Reflector.getInstanceField(retval, "offsetInMilliseconds"));
      Assert.assertEquals(0L, Reflector.getInstanceField(Reflector.getInstanceField(retval, "offsetInMilliseconds"), "value"));
      Assert.assertNotNull(((String) Reflector.getInstanceField(retval, "token")));
      Assert.assertEquals("", ((String) Reflector.getInstanceField(retval, "token")));
      Assert.assertEquals(null, Reflector.getInstanceField(retval, "playerActivity"));
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_speechlet_interfaces_audioplayer_AudioPlayerState$Builder_withPlayerActivity_43505cc713d343e7_000() throws Throwable {

    Object retval;
    {
      /* Arrange */
      String param_2 = "";
      Object param_1 = Reflector.getInstance("com.amazon.speech.speechlet.interfaces.audioplayer.AudioPlayerState$Builder");
      Reflector.setField(param_1, "playerActivity", null);
      Reflector.setField(param_1, "token", param_2);
      Reflector.setField(param_1, "offsetInMilliseconds", null);
      com.amazon.speech.speechlet.interfaces.audioplayer.PlayerActivity playerActivity = null;

      /* Act */
      Class<?> c = Reflector.forName("com.amazon.speech.speechlet.interfaces.audioplayer.AudioPlayerState$Builder");
      Method m = c.getDeclaredMethod("withPlayerActivity", Reflector.forName("com.amazon.speech.speechlet.interfaces.audioplayer.PlayerActivity"));
      m.setAccessible(true);
      retval = (Object) m.invoke(param_1, playerActivity);
    }
    {
      /* Assert result */
      Assert.assertNotNull(retval);
      Assert.assertEquals(null, Reflector.getInstanceField(retval, "offsetInMilliseconds"));
      Assert.assertNotNull(((String) Reflector.getInstanceField(retval, "token")));
      Assert.assertEquals("", ((String) Reflector.getInstanceField(retval, "token")));
      Assert.assertEquals(null, Reflector.getInstanceField(retval, "playerActivity"));
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_speechlet_interfaces_audioplayer_AudioPlayerState$Builder_withToken_b65cb26a96407887_000() throws Throwable {

    Object retval;
    {
      /* Arrange */
      String param_2 = "";
      Object param_1 = Reflector.getInstance("com.amazon.speech.speechlet.interfaces.audioplayer.AudioPlayerState$Builder");
      Reflector.setField(param_1, "playerActivity", null);
      Reflector.setField(param_1, "token", param_2);
      Reflector.setField(param_1, "offsetInMilliseconds", null);
      String token = null;

      /* Act */
      Class<?> c = Reflector.forName("com.amazon.speech.speechlet.interfaces.audioplayer.AudioPlayerState$Builder");
      Method m = c.getDeclaredMethod("withToken", Reflector.forName("java.lang.String"));
      m.setAccessible(true);
      retval = (Object) m.invoke(param_1, token);
    }
    {
      /* Assert result */
      Assert.assertNotNull(retval);
      Assert.assertEquals(null, Reflector.getInstanceField(retval, "offsetInMilliseconds"));
      Assert.assertEquals(null, ((String) Reflector.getInstanceField(retval, "token")));
      Assert.assertEquals(null, Reflector.getInstanceField(retval, "playerActivity"));
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_speechlet_interfaces_audioplayer_AudioPlayerState__init__342e021e1c4a1a20_000() throws Throwable {

    Object instance;
    {
      /* Arrange */
      Long offsetInMilliseconds = null;
      String token = null;
      com.amazon.speech.speechlet.interfaces.audioplayer.PlayerActivity playerActivity = null;

      /* Act */
      /* Creating object to test constructor */
      Class<?> c = Reflector.forName("com.amazon.speech.speechlet.interfaces.audioplayer.AudioPlayerState");
      Constructor<?> ctor = c.getDeclaredConstructor(Reflector.forName("java.lang.Long"), Reflector.forName("java.lang.String"), Reflector.forName("com.amazon.speech.speechlet.interfaces.audioplayer.PlayerActivity"));
      ctor.setAccessible(true);
      instance = ctor.newInstance(offsetInMilliseconds, token, playerActivity);

      /* Method return type is void, or not expected to return */
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_speechlet_interfaces_audioplayer_AudioPlayerState__init__a417433031c89105_000() throws Throwable {

    Object instance;
    {
      /* Arrange */
      Object param_2 = Reflector.getInstance("com.amazon.speech.speechlet.interfaces.audioplayer.AudioPlayerState$Builder");
      Reflector.setField(param_2, "playerActivity", null);
      Reflector.setField(param_2, "token", null);
      Reflector.setField(param_2, "offsetInMilliseconds", null);
      Object x0 = param_2;
      Object x1 = null;

      /* Act */
      /* Creating object to test constructor */
      Class<?> c = Reflector.forName("com.amazon.speech.speechlet.interfaces.audioplayer.AudioPlayerState");
      Constructor<?> ctor = c.getDeclaredConstructor(Reflector.forName("com.amazon.speech.speechlet.interfaces.audioplayer.AudioPlayerState$Builder"), Reflector.forName("com.amazon.speech.speechlet.interfaces.audioplayer.AudioPlayerState$1"));
      ctor.setAccessible(true);
      instance = ctor.newInstance(x0, x1);

      /* Method return type is void, or not expected to return */
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_speechlet_interfaces_audioplayer_AudioPlayerState__init__e8b8af4d432dc657_000() throws Throwable {

    Object instance;
    {
      /* Arrange */
      Object param_0 = Reflector.getInstance("com.amazon.speech.speechlet.interfaces.audioplayer.AudioPlayerState$Builder");
      Reflector.setField(param_0, "playerActivity", null);
      Reflector.setField(param_0, "token", null);
      Reflector.setField(param_0, "offsetInMilliseconds", null);
      Object builder = param_0;

      /* Act */
      /* Creating object to test constructor */
      Class<?> c = Reflector.forName("com.amazon.speech.speechlet.interfaces.audioplayer.AudioPlayerState");
      Constructor<?> ctor = c.getDeclaredConstructor(Reflector.forName("com.amazon.speech.speechlet.interfaces.audioplayer.AudioPlayerState$Builder"));
      ctor.setAccessible(true);
      instance = ctor.newInstance(builder);

      /* Method return type is void, or not expected to return */
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_speechlet_interfaces_audioplayer_AudioPlayerState_builder_84112cb6d8daab64_000() throws Throwable {

    Object retval;
    {
      /* Act */
      retval = com.amazon.speech.speechlet.interfaces.audioplayer.AudioPlayerState.builder();
    }
    {
      /* Assert result */
      Assert.assertNotNull(retval);
      Assert.assertEquals(null, Reflector.getInstanceField(retval, "offsetInMilliseconds"));
      Assert.assertEquals(null, ((String) Reflector.getInstanceField(retval, "token")));
      Assert.assertEquals(null, Reflector.getInstanceField(retval, "playerActivity"));
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_speechlet_interfaces_audioplayer_AudioPlayerState_getOffsetInMilliseconds_e25175c399bb05a_000() throws Throwable {

    Long retval;
    {
      /* Arrange */
      String param_1 = "";
      com.amazon.speech.speechlet.interfaces.audioplayer.AudioPlayerState param_2 = (com.amazon.speech.speechlet.interfaces.audioplayer.AudioPlayerState) Reflector.getInstance("com.amazon.speech.speechlet.interfaces.audioplayer.AudioPlayerState");
      Reflector.setField(param_2, "playerActivity", null);
      Reflector.setField(param_2, "token", param_1);
      Reflector.setField(param_2, "offsetInMilliseconds", null);

      /* Act */
      retval = param_2.getOffsetInMilliseconds();
    }
    {
      /* Assert result */
      Assert.assertEquals(null, retval);
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_speechlet_interfaces_audioplayer_AudioPlayerState_getPlayerActivity_524665673adefe72_000() throws Throwable {

    com.amazon.speech.speechlet.interfaces.audioplayer.PlayerActivity retval;
    {
      /* Arrange */
      String param_1 = "";
      com.amazon.speech.speechlet.interfaces.audioplayer.AudioPlayerState param_2 = (com.amazon.speech.speechlet.interfaces.audioplayer.AudioPlayerState) Reflector.getInstance("com.amazon.speech.speechlet.interfaces.audioplayer.AudioPlayerState");
      Reflector.setField(param_2, "playerActivity", null);
      Reflector.setField(param_2, "token", param_1);
      Reflector.setField(param_2, "offsetInMilliseconds", null);

      /* Act */
      retval = param_2.getPlayerActivity();
    }
    {
      /* Assert result */
      Assert.assertEquals(null, retval);
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_speechlet_interfaces_audioplayer_AudioPlayerState_getToken_bf54a09620a6f464_000() throws Throwable {

    String retval;
    {
      /* Arrange */
      com.amazon.speech.speechlet.interfaces.audioplayer.AudioPlayerState param_0 = (com.amazon.speech.speechlet.interfaces.audioplayer.AudioPlayerState) Reflector.getInstance("com.amazon.speech.speechlet.interfaces.audioplayer.AudioPlayerState");
      Reflector.setField(param_0, "playerActivity", null);
      Reflector.setField(param_0, "token", null);
      Reflector.setField(param_0, "offsetInMilliseconds", null);

      /* Act */
      retval = param_0.getToken();
    }
    {
      /* Assert result */
      Assert.assertEquals(null, retval);
    }
  }
}
