package com.amazon.speech.speechlet.interfaces.system;

import org.junit.Assert;
import org.junit.rules.ExpectedException;
import org.junit.Test;

import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

import com.diffblue.java_testcase.CompareWithFieldList;
import com.diffblue.java_testcase.FieldList;
import com.diffblue.java_testcase.IterAnswer;
import com.diffblue.java_testcase.Reflector;

public class Error_BuilderTest {

  @org.junit.Rule
  public ExpectedException thrown = ExpectedException.none();

  /* testedClasses: Error_Builder */


  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_speechlet_interfaces_system_Error$Builder__init__732005e98b2e66a3_000() throws Throwable {

    Object instance;
    {
      /* Arrange */
      Object x0 = null;

      /* Act */
      /* Creating object to test constructor */
      Class<?> c = Reflector.forName("com.amazon.speech.speechlet.interfaces.system.Error$Builder");
      Constructor<?> ctor = c.getDeclaredConstructor(Reflector.forName("com.amazon.speech.speechlet.interfaces.system.Error$1"));
      ctor.setAccessible(true);
      instance = ctor.newInstance(x0);

      /* Method return type is void, or not expected to return */
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_speechlet_interfaces_system_Error$Builder__init__e783120f3c12ecf9_000() throws Throwable {

    Object instance;
    {
      /* Act */
      /* Creating object to test constructor */
      Class<?> c = Reflector.forName("com.amazon.speech.speechlet.interfaces.system.Error$Builder");
      Constructor<?> ctor = c.getDeclaredConstructor();
      ctor.setAccessible(true);
      instance = ctor.newInstance();

      /* Method return type is void, or not expected to return */
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_speechlet_interfaces_system_Error$Builder_access$100_f4a92528e21d4ddc_000() throws Throwable {

    com.amazon.speech.speechlet.interfaces.system.ErrorType retval;
    {
      /* Arrange */
      Object param_0 = Reflector.getInstance("com.amazon.speech.speechlet.interfaces.system.Error$Builder");
      Reflector.setField(param_0, "message", null);
      Reflector.setField(param_0, "type", null);
      Object x0 = param_0;

      /* Act */
      Class<?> c = Reflector.forName("com.amazon.speech.speechlet.interfaces.system.Error$Builder");
      Method m = c.getDeclaredMethod("access$100", Reflector.forName("com.amazon.speech.speechlet.interfaces.system.Error$Builder"));
      m.setAccessible(true);
      retval = (com.amazon.speech.speechlet.interfaces.system.ErrorType) m.invoke(null, x0);
    }
    {
      /* Assert result */
      Assert.assertEquals(null, retval);
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_speechlet_interfaces_system_Error$Builder_access$200_eee786a67fbd26ce_000() throws Throwable {

    String retval;
    {
      /* Arrange */
      Object param_0 = Reflector.getInstance("com.amazon.speech.speechlet.interfaces.system.Error$Builder");
      Reflector.setField(param_0, "message", null);
      Reflector.setField(param_0, "type", null);
      Object x0 = param_0;

      /* Act */
      Class<?> c = Reflector.forName("com.amazon.speech.speechlet.interfaces.system.Error$Builder");
      Method m = c.getDeclaredMethod("access$200", Reflector.forName("com.amazon.speech.speechlet.interfaces.system.Error$Builder"));
      m.setAccessible(true);
      retval = (String) m.invoke(null, x0);
    }
    {
      /* Assert result */
      Assert.assertEquals(null, retval);
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_speechlet_interfaces_system_Error$Builder_withMessage_25b3a73ce5d0de71_000() throws Throwable {

    Object retval;
    {
      /* Arrange */
      String param_2 = "";
      Object param_1 = Reflector.getInstance("com.amazon.speech.speechlet.interfaces.system.Error$Builder");
      Reflector.setField(param_1, "message", param_2);
      Reflector.setField(param_1, "type", null);
      String message = null;

      /* Act */
      Class<?> c = Reflector.forName("com.amazon.speech.speechlet.interfaces.system.Error$Builder");
      Method m = c.getDeclaredMethod("withMessage", Reflector.forName("java.lang.String"));
      m.setAccessible(true);
      retval = (Object) m.invoke(param_1, message);
    }
    {
      /* Assert result */
      Assert.assertNotNull(retval);
      Assert.assertEquals(null, Reflector.getInstanceField(retval, "type"));
      Assert.assertEquals(null, ((String) Reflector.getInstanceField(retval, "message")));
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_speechlet_interfaces_system_Error$Builder_withType_b1f8b471c584cbe2_000() throws Throwable {

    Object retval;
    {
      /* Arrange */
      String param_2 = "";
      Object param_1 = Reflector.getInstance("com.amazon.speech.speechlet.interfaces.system.Error$Builder");
      Reflector.setField(param_1, "message", param_2);
      Reflector.setField(param_1, "type", null);
      com.amazon.speech.speechlet.interfaces.system.ErrorType type = null;

      /* Act */
      Class<?> c = Reflector.forName("com.amazon.speech.speechlet.interfaces.system.Error$Builder");
      Method m = c.getDeclaredMethod("withType", Reflector.forName("com.amazon.speech.speechlet.interfaces.system.ErrorType"));
      m.setAccessible(true);
      retval = (Object) m.invoke(param_1, type);
    }
    {
      /* Assert result */
      Assert.assertNotNull(retval);
      Assert.assertEquals(null, Reflector.getInstanceField(retval, "type"));
      Assert.assertNotNull(((String) Reflector.getInstanceField(retval, "message")));
      Assert.assertEquals("", ((String) Reflector.getInstanceField(retval, "message")));
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_speechlet_interfaces_system_Error__init__770e299f34ccae2e_000() throws Throwable {

    Object instance;
    {
      /* Arrange */
      com.amazon.speech.speechlet.interfaces.system.ErrorType type = null;
      String message = null;

      /* Act */
      /* Creating object to test constructor */
      Class<?> c = Reflector.forName("com.amazon.speech.speechlet.interfaces.system.Error");
      Constructor<?> ctor = c.getDeclaredConstructor(Reflector.forName("com.amazon.speech.speechlet.interfaces.system.ErrorType"), Reflector.forName("java.lang.String"));
      ctor.setAccessible(true);
      instance = ctor.newInstance(type, message);

      /* Method return type is void, or not expected to return */
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_speechlet_interfaces_system_Error__init__9eb44fac1595d9af_000() throws Throwable {

    Object instance;
    {
      /* Arrange */
      Object param_0 = Reflector.getInstance("com.amazon.speech.speechlet.interfaces.system.Error$Builder");
      Reflector.setField(param_0, "message", null);
      Reflector.setField(param_0, "type", null);
      Object builder = param_0;

      /* Act */
      /* Creating object to test constructor */
      Class<?> c = Reflector.forName("com.amazon.speech.speechlet.interfaces.system.Error");
      Constructor<?> ctor = c.getDeclaredConstructor(Reflector.forName("com.amazon.speech.speechlet.interfaces.system.Error$Builder"));
      ctor.setAccessible(true);
      instance = ctor.newInstance(builder);

      /* Method return type is void, or not expected to return */
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_speechlet_interfaces_system_Error_builder_54d63dd37ab6782e_000() throws Throwable {

    Object retval;
    {
      /* Act */
      retval = com.amazon.speech.speechlet.interfaces.system.Error.builder();
    }
    {
      /* Assert result */
      Assert.assertNotNull(retval);
      Assert.assertEquals(null, Reflector.getInstanceField(retval, "type"));
      Assert.assertEquals(null, ((String) Reflector.getInstanceField(retval, "message")));
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_speechlet_interfaces_system_Error_getMessage_63dd883a8ae11852_000() throws Throwable {

    String retval;
    {
      /* Arrange */
      com.amazon.speech.speechlet.interfaces.system.Error param_0 = (com.amazon.speech.speechlet.interfaces.system.Error) Reflector.getInstance("com.amazon.speech.speechlet.interfaces.system.Error");
      Reflector.setField(param_0, "message", null);
      Reflector.setField(param_0, "type", null);

      /* Act */
      retval = param_0.getMessage();
    }
    {
      /* Assert result */
      Assert.assertEquals(null, retval);
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_speechlet_interfaces_system_Error_getType_6514a06a41a30736_000() throws Throwable {

    com.amazon.speech.speechlet.interfaces.system.ErrorType retval;
    {
      /* Arrange */
      String param_1 = "";
      com.amazon.speech.speechlet.interfaces.system.Error param_2 = (com.amazon.speech.speechlet.interfaces.system.Error) Reflector.getInstance("com.amazon.speech.speechlet.interfaces.system.Error");
      Reflector.setField(param_2, "message", param_1);
      Reflector.setField(param_2, "type", null);

      /* Act */
      retval = param_2.getType();
    }
    {
      /* Assert result */
      Assert.assertEquals(null, retval);
    }
  }
}
