package com.amazon.speech.speechlet.interfaces.system;

import org.junit.Assert;
import org.junit.rules.ExpectedException;
import org.junit.Test;

import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

import com.diffblue.java_testcase.CompareWithFieldList;
import com.diffblue.java_testcase.FieldList;
import com.diffblue.java_testcase.IterAnswer;
import com.diffblue.java_testcase.Reflector;

public class SystemState_BuilderTest {

  @org.junit.Rule
  public ExpectedException thrown = ExpectedException.none();

  /* testedClasses: SystemState_Builder */


  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_speechlet_interfaces_system_SystemState$Builder__init__81755fc2c92548c0_000() throws Throwable {

    Object instance;
    {
      /* Arrange */
      Object x0 = null;

      /* Act */
      /* Creating object to test constructor */
      Class<?> c = Reflector.forName("com.amazon.speech.speechlet.interfaces.system.SystemState$Builder");
      Constructor<?> ctor = c.getDeclaredConstructor(Reflector.forName("com.amazon.speech.speechlet.interfaces.system.SystemState$1"));
      ctor.setAccessible(true);
      instance = ctor.newInstance(x0);

      /* Method return type is void, or not expected to return */
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_speechlet_interfaces_system_SystemState$Builder__init__d06bd5d57db37260_000() throws Throwable {

    Object instance;
    {
      /* Act */
      /* Creating object to test constructor */
      Class<?> c = Reflector.forName("com.amazon.speech.speechlet.interfaces.system.SystemState$Builder");
      Constructor<?> ctor = c.getDeclaredConstructor();
      ctor.setAccessible(true);
      instance = ctor.newInstance();

      /* Method return type is void, or not expected to return */
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_speechlet_interfaces_system_SystemState$Builder_access$100_f8663c021b7d531d_000() throws Throwable {

    com.amazon.speech.speechlet.Application retval;
    {
      /* Arrange */
      Object param_0 = Reflector.getInstance("com.amazon.speech.speechlet.interfaces.system.SystemState$Builder");
      Reflector.setField(param_0, "apiEndpoint", null);
      Reflector.setField(param_0, "user", null);
      Reflector.setField(param_0, "device", null);
      Reflector.setField(param_0, "application", null);
      Object x0 = param_0;

      /* Act */
      Class<?> c = Reflector.forName("com.amazon.speech.speechlet.interfaces.system.SystemState$Builder");
      Method m = c.getDeclaredMethod("access$100", Reflector.forName("com.amazon.speech.speechlet.interfaces.system.SystemState$Builder"));
      m.setAccessible(true);
      retval = (com.amazon.speech.speechlet.Application) m.invoke(null, x0);
    }
    {
      /* Assert result */
      Assert.assertEquals(null, retval);
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_speechlet_interfaces_system_SystemState$Builder_access$200_4b2fd1bd6d4b2914_000() throws Throwable {

    com.amazon.speech.speechlet.User retval;
    {
      /* Arrange */
      Object param_0 = Reflector.getInstance("com.amazon.speech.speechlet.interfaces.system.SystemState$Builder");
      Reflector.setField(param_0, "apiEndpoint", null);
      Reflector.setField(param_0, "user", null);
      Reflector.setField(param_0, "device", null);
      Reflector.setField(param_0, "application", null);
      Object x0 = param_0;

      /* Act */
      Class<?> c = Reflector.forName("com.amazon.speech.speechlet.interfaces.system.SystemState$Builder");
      Method m = c.getDeclaredMethod("access$200", Reflector.forName("com.amazon.speech.speechlet.interfaces.system.SystemState$Builder"));
      m.setAccessible(true);
      retval = (com.amazon.speech.speechlet.User) m.invoke(null, x0);
    }
    {
      /* Assert result */
      Assert.assertEquals(null, retval);
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_speechlet_interfaces_system_SystemState$Builder_access$300_1d7d04a38b3be36_000() throws Throwable {

    com.amazon.speech.speechlet.Device retval;
    {
      /* Arrange */
      Object param_0 = Reflector.getInstance("com.amazon.speech.speechlet.interfaces.system.SystemState$Builder");
      Reflector.setField(param_0, "apiEndpoint", null);
      Reflector.setField(param_0, "user", null);
      Reflector.setField(param_0, "device", null);
      Reflector.setField(param_0, "application", null);
      Object x0 = param_0;

      /* Act */
      Class<?> c = Reflector.forName("com.amazon.speech.speechlet.interfaces.system.SystemState$Builder");
      Method m = c.getDeclaredMethod("access$300", Reflector.forName("com.amazon.speech.speechlet.interfaces.system.SystemState$Builder"));
      m.setAccessible(true);
      retval = (com.amazon.speech.speechlet.Device) m.invoke(null, x0);
    }
    {
      /* Assert result */
      Assert.assertEquals(null, retval);
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_speechlet_interfaces_system_SystemState$Builder_access$400_ef36b37350c11a13_000() throws Throwable {

    String retval;
    {
      /* Arrange */
      Object param_0 = Reflector.getInstance("com.amazon.speech.speechlet.interfaces.system.SystemState$Builder");
      Reflector.setField(param_0, "apiEndpoint", null);
      Reflector.setField(param_0, "user", null);
      Reflector.setField(param_0, "device", null);
      Reflector.setField(param_0, "application", null);
      Object x0 = param_0;

      /* Act */
      Class<?> c = Reflector.forName("com.amazon.speech.speechlet.interfaces.system.SystemState$Builder");
      Method m = c.getDeclaredMethod("access$400", Reflector.forName("com.amazon.speech.speechlet.interfaces.system.SystemState$Builder"));
      m.setAccessible(true);
      retval = (String) m.invoke(null, x0);
    }
    {
      /* Assert result */
      Assert.assertEquals(null, retval);
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_speechlet_interfaces_system_SystemState$Builder_build_c66a029fa00c861c_000() throws Throwable {

    com.amazon.speech.speechlet.interfaces.system.SystemState retval;
    {
      /* Arrange */
      String param_1 = "";
      Object param_2 = Reflector.getInstance("com.amazon.speech.speechlet.interfaces.system.SystemState$Builder");
      Reflector.setField(param_2, "apiEndpoint", param_1);
      Reflector.setField(param_2, "user", null);
      Reflector.setField(param_2, "device", null);
      Reflector.setField(param_2, "application", null);

      /* Act */
      Class<?> c = Reflector.forName("com.amazon.speech.speechlet.interfaces.system.SystemState$Builder");
      Method m = c.getDeclaredMethod("build");
      m.setAccessible(true);
      retval = (com.amazon.speech.speechlet.interfaces.system.SystemState) m.invoke(param_2);
    }
    {
      /* Assert result */
      Assert.assertNotNull(retval);
      Assert.assertEquals(null, Reflector.getInstanceField(retval, "application"));
      Assert.assertEquals(null, Reflector.getInstanceField(retval, "user"));
      Assert.assertEquals(null, Reflector.getInstanceField(retval, "device"));
      Assert.assertNotNull(((String) Reflector.getInstanceField(retval, "apiEndpoint")));
      Assert.assertEquals("", ((String) Reflector.getInstanceField(retval, "apiEndpoint")));
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_speechlet_interfaces_system_SystemState$Builder_withApiEndpoint_3bbc5704e33d4fdd_000() throws Throwable {

    Object retval;
    {
      /* Arrange */
      String param_3 = "";
      com.amazon.speech.speechlet.Application param_2 = (com.amazon.speech.speechlet.Application) Reflector.getInstance("com.amazon.speech.speechlet.Application");
      Reflector.setField(param_2, "applicationId", null);
      Object param_1 = Reflector.getInstance("com.amazon.speech.speechlet.interfaces.system.SystemState$Builder");
      Reflector.setField(param_1, "apiEndpoint", param_3);
      Reflector.setField(param_1, "user", null);
      Reflector.setField(param_1, "device", null);
      Reflector.setField(param_1, "application", param_2);
      String apiEndpoint = null;

      /* Act */
      Class<?> c = Reflector.forName("com.amazon.speech.speechlet.interfaces.system.SystemState$Builder");
      Method m = c.getDeclaredMethod("withApiEndpoint", Reflector.forName("java.lang.String"));
      m.setAccessible(true);
      retval = (Object) m.invoke(param_1, apiEndpoint);
    }
    {
      /* Assert result */
      Assert.assertNotNull(retval);
      Assert.assertNotNull(Reflector.getInstanceField(retval, "application"));
      Assert.assertEquals(null, ((String) Reflector.getInstanceField(Reflector.getInstanceField(retval, "application"), "applicationId")));
      Assert.assertEquals(null, Reflector.getInstanceField(retval, "user"));
      Assert.assertEquals(null, Reflector.getInstanceField(retval, "device"));
      Assert.assertEquals(null, ((String) Reflector.getInstanceField(retval, "apiEndpoint")));
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_speechlet_interfaces_system_SystemState$Builder_withApplication_dfe7b9f1ecbd7676_000() throws Throwable {

    Object retval;
    {
      /* Arrange */
      String param_2 = "";
      Object param_1 = Reflector.getInstance("com.amazon.speech.speechlet.interfaces.system.SystemState$Builder");
      Reflector.setField(param_1, "apiEndpoint", param_2);
      Reflector.setField(param_1, "user", null);
      Reflector.setField(param_1, "device", null);
      Reflector.setField(param_1, "application", null);
      com.amazon.speech.speechlet.Application application = null;

      /* Act */
      Class<?> c = Reflector.forName("com.amazon.speech.speechlet.interfaces.system.SystemState$Builder");
      Method m = c.getDeclaredMethod("withApplication", Reflector.forName("com.amazon.speech.speechlet.Application"));
      m.setAccessible(true);
      retval = (Object) m.invoke(param_1, application);
    }
    {
      /* Assert result */
      Assert.assertNotNull(retval);
      Assert.assertEquals(null, Reflector.getInstanceField(retval, "application"));
      Assert.assertEquals(null, Reflector.getInstanceField(retval, "user"));
      Assert.assertEquals(null, Reflector.getInstanceField(retval, "device"));
      Assert.assertNotNull(((String) Reflector.getInstanceField(retval, "apiEndpoint")));
      Assert.assertEquals("", ((String) Reflector.getInstanceField(retval, "apiEndpoint")));
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_speechlet_interfaces_system_SystemState$Builder_withDevice_1991db2246a0770c_000() throws Throwable {

    Object retval;
    {
      /* Arrange */
      String param_2 = "";
      Object param_1 = Reflector.getInstance("com.amazon.speech.speechlet.interfaces.system.SystemState$Builder");
      Reflector.setField(param_1, "apiEndpoint", param_2);
      Reflector.setField(param_1, "user", null);
      Reflector.setField(param_1, "device", null);
      Reflector.setField(param_1, "application", null);
      com.amazon.speech.speechlet.Device device = null;

      /* Act */
      Class<?> c = Reflector.forName("com.amazon.speech.speechlet.interfaces.system.SystemState$Builder");
      Method m = c.getDeclaredMethod("withDevice", Reflector.forName("com.amazon.speech.speechlet.Device"));
      m.setAccessible(true);
      retval = (Object) m.invoke(param_1, device);
    }
    {
      /* Assert result */
      Assert.assertNotNull(retval);
      Assert.assertEquals(null, Reflector.getInstanceField(retval, "application"));
      Assert.assertEquals(null, Reflector.getInstanceField(retval, "user"));
      Assert.assertEquals(null, Reflector.getInstanceField(retval, "device"));
      Assert.assertNotNull(((String) Reflector.getInstanceField(retval, "apiEndpoint")));
      Assert.assertEquals("", ((String) Reflector.getInstanceField(retval, "apiEndpoint")));
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_speechlet_interfaces_system_SystemState$Builder_withUser_337c1e81743f84b2_000() throws Throwable {

    Object retval;
    {
      /* Arrange */
      String param_2 = "";
      Object param_1 = Reflector.getInstance("com.amazon.speech.speechlet.interfaces.system.SystemState$Builder");
      Reflector.setField(param_1, "apiEndpoint", param_2);
      Reflector.setField(param_1, "user", null);
      Reflector.setField(param_1, "device", null);
      Reflector.setField(param_1, "application", null);
      com.amazon.speech.speechlet.User user = null;

      /* Act */
      Class<?> c = Reflector.forName("com.amazon.speech.speechlet.interfaces.system.SystemState$Builder");
      Method m = c.getDeclaredMethod("withUser", Reflector.forName("com.amazon.speech.speechlet.User"));
      m.setAccessible(true);
      retval = (Object) m.invoke(param_1, user);
    }
    {
      /* Assert result */
      Assert.assertNotNull(retval);
      Assert.assertEquals(null, Reflector.getInstanceField(retval, "application"));
      Assert.assertEquals(null, Reflector.getInstanceField(retval, "user"));
      Assert.assertEquals(null, Reflector.getInstanceField(retval, "device"));
      Assert.assertNotNull(((String) Reflector.getInstanceField(retval, "apiEndpoint")));
      Assert.assertEquals("", ((String) Reflector.getInstanceField(retval, "apiEndpoint")));
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_speechlet_interfaces_system_SystemState__init__cd8b66017c37b718_000() throws Throwable {

    Object instance;
    {
      /* Arrange */
      com.amazon.speech.speechlet.Application application = null;
      com.amazon.speech.speechlet.User user = null;
      com.amazon.speech.speechlet.Device device = null;
      String apiEndpoint = null;

      /* Act */
      /* Creating object to test constructor */
      Class<?> c = Reflector.forName("com.amazon.speech.speechlet.interfaces.system.SystemState");
      Constructor<?> ctor = c.getDeclaredConstructor(Reflector.forName("com.amazon.speech.speechlet.Application"), Reflector.forName("com.amazon.speech.speechlet.User"), Reflector.forName("com.amazon.speech.speechlet.Device"), Reflector.forName("java.lang.String"));
      ctor.setAccessible(true);
      instance = ctor.newInstance(application, user, device, apiEndpoint);

      /* Method return type is void, or not expected to return */
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_speechlet_interfaces_system_SystemState__init__e6625426de4da15_000() throws Throwable {

    Object instance;
    {
      /* Arrange */
      Object param_0 = Reflector.getInstance("com.amazon.speech.speechlet.interfaces.system.SystemState$Builder");
      Reflector.setField(param_0, "apiEndpoint", null);
      Reflector.setField(param_0, "user", null);
      Reflector.setField(param_0, "device", null);
      Reflector.setField(param_0, "application", null);
      Object builder = param_0;

      /* Act */
      /* Creating object to test constructor */
      Class<?> c = Reflector.forName("com.amazon.speech.speechlet.interfaces.system.SystemState");
      Constructor<?> ctor = c.getDeclaredConstructor(Reflector.forName("com.amazon.speech.speechlet.interfaces.system.SystemState$Builder"));
      ctor.setAccessible(true);
      instance = ctor.newInstance(builder);

      /* Method return type is void, or not expected to return */
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_speechlet_interfaces_system_SystemState__init__f0078953a82a4036_000() throws Throwable {

    Object instance;
    {
      /* Arrange */
      Object param_2 = Reflector.getInstance("com.amazon.speech.speechlet.interfaces.system.SystemState$Builder");
      Reflector.setField(param_2, "apiEndpoint", null);
      Reflector.setField(param_2, "user", null);
      Reflector.setField(param_2, "device", null);
      Reflector.setField(param_2, "application", null);
      Object x0 = param_2;
      Object x1 = null;

      /* Act */
      /* Creating object to test constructor */
      Class<?> c = Reflector.forName("com.amazon.speech.speechlet.interfaces.system.SystemState");
      Constructor<?> ctor = c.getDeclaredConstructor(Reflector.forName("com.amazon.speech.speechlet.interfaces.system.SystemState$Builder"), Reflector.forName("com.amazon.speech.speechlet.interfaces.system.SystemState$1"));
      ctor.setAccessible(true);
      instance = ctor.newInstance(x0, x1);

      /* Method return type is void, or not expected to return */
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_speechlet_interfaces_system_SystemState_builder_9088a93c440eef22_000() throws Throwable {

    Object retval;
    {
      /* Act */
      retval = com.amazon.speech.speechlet.interfaces.system.SystemState.builder();
    }
    {
      /* Assert result */
      Assert.assertNotNull(retval);
      Assert.assertEquals(null, Reflector.getInstanceField(retval, "application"));
      Assert.assertEquals(null, Reflector.getInstanceField(retval, "user"));
      Assert.assertEquals(null, Reflector.getInstanceField(retval, "device"));
      Assert.assertEquals(null, ((String) Reflector.getInstanceField(retval, "apiEndpoint")));
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_speechlet_interfaces_system_SystemState_getApiEndpoint_f13624eb6f2c85e9_000() throws Throwable {

    String retval;
    {
      /* Arrange */
      com.amazon.speech.speechlet.interfaces.system.SystemState param_0 = (com.amazon.speech.speechlet.interfaces.system.SystemState) Reflector.getInstance("com.amazon.speech.speechlet.interfaces.system.SystemState");
      Reflector.setField(param_0, "apiEndpoint", null);
      Reflector.setField(param_0, "user", null);
      Reflector.setField(param_0, "device", null);
      Reflector.setField(param_0, "application", null);

      /* Act */
      retval = param_0.getApiEndpoint();
    }
    {
      /* Assert result */
      Assert.assertEquals(null, retval);
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_speechlet_interfaces_system_SystemState_getApplication_8fd1fdc7abcbd2f8_000() throws Throwable {

    com.amazon.speech.speechlet.Application retval;
    {
      /* Arrange */
      String param_1 = "";
      com.amazon.speech.speechlet.interfaces.system.SystemState param_2 = (com.amazon.speech.speechlet.interfaces.system.SystemState) Reflector.getInstance("com.amazon.speech.speechlet.interfaces.system.SystemState");
      Reflector.setField(param_2, "apiEndpoint", param_1);
      Reflector.setField(param_2, "user", null);
      Reflector.setField(param_2, "device", null);
      Reflector.setField(param_2, "application", null);

      /* Act */
      retval = param_2.getApplication();
    }
    {
      /* Assert result */
      Assert.assertEquals(null, retval);
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_speechlet_interfaces_system_SystemState_getDevice_b8e392ce293a4ca3_000() throws Throwable {

    com.amazon.speech.speechlet.Device retval;
    {
      /* Arrange */
      String param_1 = "";
      com.amazon.speech.speechlet.interfaces.system.SystemState param_2 = (com.amazon.speech.speechlet.interfaces.system.SystemState) Reflector.getInstance("com.amazon.speech.speechlet.interfaces.system.SystemState");
      Reflector.setField(param_2, "apiEndpoint", param_1);
      Reflector.setField(param_2, "user", null);
      Reflector.setField(param_2, "device", null);
      Reflector.setField(param_2, "application", null);

      /* Act */
      retval = param_2.getDevice();
    }
    {
      /* Assert result */
      Assert.assertEquals(null, retval);
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_speechlet_interfaces_system_SystemState_getUser_fdc580af897d20d9_000() throws Throwable {

    com.amazon.speech.speechlet.User retval;
    {
      /* Arrange */
      String param_1 = "";
      com.amazon.speech.speechlet.interfaces.system.SystemState param_2 = (com.amazon.speech.speechlet.interfaces.system.SystemState) Reflector.getInstance("com.amazon.speech.speechlet.interfaces.system.SystemState");
      Reflector.setField(param_2, "apiEndpoint", param_1);
      Reflector.setField(param_2, "user", null);
      Reflector.setField(param_2, "device", null);
      Reflector.setField(param_2, "application", null);

      /* Act */
      retval = param_2.getUser();
    }
    {
      /* Assert result */
      Assert.assertEquals(null, retval);
    }
  }
}
