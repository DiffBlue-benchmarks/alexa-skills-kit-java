package com.amazon.speech.speechlet.interfaces.core;

import org.junit.Assert;
import org.junit.rules.ExpectedException;
import org.junit.Test;

import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

import com.diffblue.java_testcase.CompareWithFieldList;
import com.diffblue.java_testcase.FieldList;
import com.diffblue.java_testcase.IterAnswer;
import com.diffblue.java_testcase.Reflector;

public class PermissionBody_BuilderTest {

  @org.junit.Rule
  public ExpectedException thrown = ExpectedException.none();

  /* testedClasses: PermissionBody_Builder */


  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_speechlet_interfaces_core_PermissionBody$Builder__init__bb430b4b6a0e820f_000() throws Throwable {

    Object instance;
    {
      /* Act */
      /* Creating object to test constructor */
      Class<?> c = Reflector.forName("com.amazon.speech.speechlet.interfaces.core.PermissionBody$Builder");
      Constructor<?> ctor = c.getDeclaredConstructor();
      ctor.setAccessible(true);
      instance = ctor.newInstance();

      /* Method return type is void, or not expected to return */
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_speechlet_interfaces_core_PermissionBody$Builder_access$000_364828ead09ffd77_000() throws Throwable {

    java.util.List retval;
    {
      /* Arrange */
      Object param_0 = Reflector.getInstance("com.amazon.speech.speechlet.interfaces.core.PermissionBody$Builder");
      Reflector.setField(param_0, "permissionList", null);
      Object x0 = param_0;

      /* Act */
      Class<?> c = Reflector.forName("com.amazon.speech.speechlet.interfaces.core.PermissionBody$Builder");
      Method m = c.getDeclaredMethod("access$000", Reflector.forName("com.amazon.speech.speechlet.interfaces.core.PermissionBody$Builder"));
      m.setAccessible(true);
      retval = (java.util.List) m.invoke(null, x0);
    }
    {
      /* Assert result */
      Assert.assertEquals(null, retval);
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_speechlet_interfaces_core_PermissionBody_builder_af8ca01d35744cec_000() throws Throwable {

    Object retval;
    {
      /* Act */
      retval = com.amazon.speech.speechlet.interfaces.core.PermissionBody.builder();
    }
    {
      /* Assert result */
      Assert.assertNotNull(retval);
      Assert.assertNotNull(Reflector.getInstanceField(retval, "permissionList"));

      java.util.ArrayList arrayList = new java.util.ArrayList();
      Assert.assertEquals(Reflector.getInstanceField(retval, "permissionList"), arrayList);
      ;
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_speechlet_interfaces_core_PermissionBody_getAcceptedPermissions_b78e36255e64e8fc_000() throws Throwable {

    java.util.List<com.amazon.speech.speechlet.interfaces.core.Permission> retval;
    {
      /* Arrange */
      com.amazon.speech.speechlet.interfaces.core.PermissionBody param_0 = (com.amazon.speech.speechlet.interfaces.core.PermissionBody) Reflector.getInstance("com.amazon.speech.speechlet.interfaces.core.PermissionBody");
      Reflector.setField(param_0, "permissionList", null);

      /* Act */
      retval = param_0.getAcceptedPermissions();
    }
    {
      /* Assert result */
      Assert.assertEquals(null, retval);
    }
  }
}
