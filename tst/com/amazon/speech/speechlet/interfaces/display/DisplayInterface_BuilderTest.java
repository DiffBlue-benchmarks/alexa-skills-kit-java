package com.amazon.speech.speechlet.interfaces.display;

import org.junit.Assert;
import org.junit.rules.ExpectedException;
import org.junit.Test;

import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

import com.diffblue.java_testcase.CompareWithFieldList;
import com.diffblue.java_testcase.FieldList;
import com.diffblue.java_testcase.IterAnswer;
import com.diffblue.java_testcase.Reflector;

public class DisplayInterface_BuilderTest {

  @org.junit.Rule
  public ExpectedException thrown = ExpectedException.none();

  /* testedClasses: DisplayInterface_Builder */


  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_speechlet_interfaces_display_DisplayInterface$Builder__init__850a07ec0f2edd5f_000() throws Throwable {

    Object instance;
    {
      /* Arrange */
      Object x0 = null;

      /* Act */
      /* Creating object to test constructor */
      Class<?> c = Reflector.forName("com.amazon.speech.speechlet.interfaces.display.DisplayInterface$Builder");
      Constructor<?> ctor = c.getDeclaredConstructor(Reflector.forName("com.amazon.speech.speechlet.interfaces.display.DisplayInterface$1"));
      ctor.setAccessible(true);
      instance = ctor.newInstance(x0);

      /* Method return type is void, or not expected to return */
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_speechlet_interfaces_display_DisplayInterface$Builder__init__fd46e7135151ef5a_000() throws Throwable {

    Object instance;
    {
      /* Act */
      /* Creating object to test constructor */
      Class<?> c = Reflector.forName("com.amazon.speech.speechlet.interfaces.display.DisplayInterface$Builder");
      Constructor<?> ctor = c.getDeclaredConstructor();
      ctor.setAccessible(true);
      instance = ctor.newInstance();

      /* Method return type is void, or not expected to return */
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_speechlet_interfaces_display_DisplayInterface$Builder_access$100_a3643d479283c117_000() throws Throwable {

    String retval;
    {
      /* Arrange */
      Object param_0 = Reflector.getInstance("com.amazon.speech.speechlet.interfaces.display.DisplayInterface$Builder");
      Reflector.setField(param_0, "markupVersion", null);
      Reflector.setField(param_0, "templateVersion", null);
      Object x0 = param_0;

      /* Act */
      Class<?> c = Reflector.forName("com.amazon.speech.speechlet.interfaces.display.DisplayInterface$Builder");
      Method m = c.getDeclaredMethod("access$100", Reflector.forName("com.amazon.speech.speechlet.interfaces.display.DisplayInterface$Builder"));
      m.setAccessible(true);
      retval = (String) m.invoke(null, x0);
    }
    {
      /* Assert result */
      Assert.assertEquals(null, retval);
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_speechlet_interfaces_display_DisplayInterface$Builder_access$200_b668436fbd20fc6c_000() throws Throwable {

    String retval;
    {
      /* Arrange */
      Object param_0 = Reflector.getInstance("com.amazon.speech.speechlet.interfaces.display.DisplayInterface$Builder");
      Reflector.setField(param_0, "markupVersion", null);
      Reflector.setField(param_0, "templateVersion", null);
      Object x0 = param_0;

      /* Act */
      Class<?> c = Reflector.forName("com.amazon.speech.speechlet.interfaces.display.DisplayInterface$Builder");
      Method m = c.getDeclaredMethod("access$200", Reflector.forName("com.amazon.speech.speechlet.interfaces.display.DisplayInterface$Builder"));
      m.setAccessible(true);
      retval = (String) m.invoke(null, x0);
    }
    {
      /* Assert result */
      Assert.assertEquals(null, retval);
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_speechlet_interfaces_display_DisplayInterface$Builder_build_1eafed053f6842f4_000() throws Throwable {

    com.amazon.speech.speechlet.interfaces.display.DisplayInterface retval;
    {
      /* Arrange */
      String param_1 = "";
      String param_3 = "";
      Object param_4 = Reflector.getInstance("com.amazon.speech.speechlet.interfaces.display.DisplayInterface$Builder");
      Reflector.setField(param_4, "markupVersion", param_1);
      Reflector.setField(param_4, "templateVersion", param_3);

      /* Act */
      Class<?> c = Reflector.forName("com.amazon.speech.speechlet.interfaces.display.DisplayInterface$Builder");
      Method m = c.getDeclaredMethod("build");
      m.setAccessible(true);
      retval = (com.amazon.speech.speechlet.interfaces.display.DisplayInterface) m.invoke(param_4);
    }
    {
      /* Assert result */
      Assert.assertNotNull(retval);
      Assert.assertNotNull(((String) Reflector.getInstanceField(retval, "templateVersion")));
      Assert.assertEquals("", ((String) Reflector.getInstanceField(retval, "templateVersion")));
      Assert.assertNotNull(((String) Reflector.getInstanceField(retval, "markupVersion")));
      Assert.assertEquals("", ((String) Reflector.getInstanceField(retval, "markupVersion")));
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_speechlet_interfaces_display_DisplayInterface$Builder_withMarkupVersion_b1e013f64e98089a_000() throws Throwable {

    Object retval;
    {
      /* Arrange */
      String param_4 = "";
      String param_2 = "";
      Object param_1 = Reflector.getInstance("com.amazon.speech.speechlet.interfaces.display.DisplayInterface$Builder");
      Reflector.setField(param_1, "markupVersion", param_4);
      Reflector.setField(param_1, "templateVersion", param_2);
      String markupVersion = null;

      /* Act */
      Class<?> c = Reflector.forName("com.amazon.speech.speechlet.interfaces.display.DisplayInterface$Builder");
      Method m = c.getDeclaredMethod("withMarkupVersion", Reflector.forName("java.lang.String"));
      m.setAccessible(true);
      retval = (Object) m.invoke(param_1, markupVersion);
    }
    {
      /* Assert result */
      Assert.assertNotNull(retval);
      Assert.assertNotNull(((String) Reflector.getInstanceField(retval, "templateVersion")));
      Assert.assertEquals("", ((String) Reflector.getInstanceField(retval, "templateVersion")));
      Assert.assertEquals(null, ((String) Reflector.getInstanceField(retval, "markupVersion")));
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_speechlet_interfaces_display_DisplayInterface$Builder_withTemplateVersion_b93167ea662361ac_000() throws Throwable {

    Object retval;
    {
      /* Arrange */
      String param_4 = "";
      String param_2 = "";
      Object param_1 = Reflector.getInstance("com.amazon.speech.speechlet.interfaces.display.DisplayInterface$Builder");
      Reflector.setField(param_1, "markupVersion", param_4);
      Reflector.setField(param_1, "templateVersion", param_2);
      String templateVersion = null;

      /* Act */
      Class<?> c = Reflector.forName("com.amazon.speech.speechlet.interfaces.display.DisplayInterface$Builder");
      Method m = c.getDeclaredMethod("withTemplateVersion", Reflector.forName("java.lang.String"));
      m.setAccessible(true);
      retval = (Object) m.invoke(param_1, templateVersion);
    }
    {
      /* Assert result */
      Assert.assertNotNull(retval);
      Assert.assertEquals(null, ((String) Reflector.getInstanceField(retval, "templateVersion")));
      Assert.assertNotNull(((String) Reflector.getInstanceField(retval, "markupVersion")));
      Assert.assertEquals("", ((String) Reflector.getInstanceField(retval, "markupVersion")));
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_speechlet_interfaces_display_DisplayInterface__clinit__9335c2baf2d04eea_000() throws Throwable {

    Object constructed;
    {
      /* Act */
      /* Using constructor to test static initializer */
      constructed = Reflector.getInstance("com.amazon.speech.speechlet.interfaces.display.DisplayInterface");
      /* Method return type is void, or not expected to return */
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_speechlet_interfaces_display_DisplayInterface__init__33f805c00fad6f53_000() throws Throwable {

    Object instance;
    {
      /* Arrange */
      String templateVersion = null;
      String markupVersion = null;

      /* Act */
      /* Creating object to test constructor */
      Class<?> c = Reflector.forName("com.amazon.speech.speechlet.interfaces.display.DisplayInterface");
      Constructor<?> ctor = c.getDeclaredConstructor(Reflector.forName("java.lang.String"), Reflector.forName("java.lang.String"));
      ctor.setAccessible(true);
      instance = ctor.newInstance(templateVersion, markupVersion);

      /* Method return type is void, or not expected to return */
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_speechlet_interfaces_display_DisplayInterface__init__71be177e3a0bb0d5_000() throws Throwable {

    Object instance;
    {
      /* Arrange */
      Object param_2 = Reflector.getInstance("com.amazon.speech.speechlet.interfaces.display.DisplayInterface$Builder");
      Reflector.setField(param_2, "markupVersion", null);
      Reflector.setField(param_2, "templateVersion", null);
      Object x0 = param_2;
      Object x1 = null;

      /* Act */
      /* Creating object to test constructor */
      Class<?> c = Reflector.forName("com.amazon.speech.speechlet.interfaces.display.DisplayInterface");
      Constructor<?> ctor = c.getDeclaredConstructor(Reflector.forName("com.amazon.speech.speechlet.interfaces.display.DisplayInterface$Builder"), Reflector.forName("com.amazon.speech.speechlet.interfaces.display.DisplayInterface$1"));
      ctor.setAccessible(true);
      instance = ctor.newInstance(x0, x1);

      /* Method return type is void, or not expected to return */
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_speechlet_interfaces_display_DisplayInterface__init__b3094c973ba08a16_000() throws Throwable {

    Object instance;
    {
      /* Arrange */
      Object param_0 = Reflector.getInstance("com.amazon.speech.speechlet.interfaces.display.DisplayInterface$Builder");
      Reflector.setField(param_0, "markupVersion", null);
      Reflector.setField(param_0, "templateVersion", null);
      Object builder = param_0;

      /* Act */
      /* Creating object to test constructor */
      Class<?> c = Reflector.forName("com.amazon.speech.speechlet.interfaces.display.DisplayInterface");
      Constructor<?> ctor = c.getDeclaredConstructor(Reflector.forName("com.amazon.speech.speechlet.interfaces.display.DisplayInterface$Builder"));
      ctor.setAccessible(true);
      instance = ctor.newInstance(builder);

      /* Method return type is void, or not expected to return */
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_speechlet_interfaces_display_DisplayInterface_builder_a7d37a0e9733bfcc_000() throws Throwable {

    Object retval;
    {
      /* Act */
      retval = com.amazon.speech.speechlet.interfaces.display.DisplayInterface.builder();
    }
    {
      /* Assert result */
      Assert.assertNotNull(retval);
      Assert.assertNotNull(((String) Reflector.getInstanceField(retval, "templateVersion")));
      Assert.assertEquals("1.0", ((String) Reflector.getInstanceField(retval, "templateVersion")));
      Assert.assertNotNull(((String) Reflector.getInstanceField(retval, "markupVersion")));
      Assert.assertEquals("1.0", ((String) Reflector.getInstanceField(retval, "markupVersion")));
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_speechlet_interfaces_display_DisplayInterface_getMarkupVersion_1e6ab56b6014e4c4_000() throws Throwable {

    String retval;
    {
      /* Arrange */
      String param_1 = "";
      com.amazon.speech.speechlet.interfaces.display.DisplayInterface param_2 = (com.amazon.speech.speechlet.interfaces.display.DisplayInterface) Reflector.getInstance("com.amazon.speech.speechlet.interfaces.display.DisplayInterface");
      Reflector.setField(param_2, "markupVersion", null);
      Reflector.setField(param_2, "templateVersion", param_1);

      /* Act */
      retval = param_2.getMarkupVersion();
    }
    {
      /* Assert result */
      Assert.assertEquals(null, retval);
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_speechlet_interfaces_display_DisplayInterface_getTemplateVersion_cc841f829cfa6e0b_000() throws Throwable {

    String retval;
    {
      /* Arrange */
      String param_1 = "";
      com.amazon.speech.speechlet.interfaces.display.DisplayInterface param_2 = (com.amazon.speech.speechlet.interfaces.display.DisplayInterface) Reflector.getInstance("com.amazon.speech.speechlet.interfaces.display.DisplayInterface");
      Reflector.setField(param_2, "markupVersion", param_1);
      Reflector.setField(param_2, "templateVersion", null);

      /* Act */
      retval = param_2.getTemplateVersion();
    }
    {
      /* Assert result */
      Assert.assertEquals(null, retval);
    }
  }
}
