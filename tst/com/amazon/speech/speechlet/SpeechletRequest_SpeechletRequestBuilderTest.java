package com.amazon.speech.speechlet;

import org.junit.Assert;
import org.junit.rules.ExpectedException;
import org.junit.Test;

import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

import com.diffblue.java_testcase.CompareWithFieldList;
import com.diffblue.java_testcase.FieldList;
import com.diffblue.java_testcase.IterAnswer;
import com.diffblue.java_testcase.Reflector;

public class SpeechletRequest_SpeechletRequestBuilderTest {

  @org.junit.Rule
  public ExpectedException thrown = ExpectedException.none();

  /* testedClasses: SpeechletRequest_SpeechletRequestBuilder */


  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_speechlet_SpeechletRequest$SpeechletRequestBuilder_access$000_ec476b4d36d7daab_000() throws Throwable {

    String retval;
    {
      /* Arrange */
      com.amazon.speech.slu.Slot param_0 = (com.amazon.speech.slu.Slot) Reflector.getInstance("com.amazon.speech.slu.Slot");
      Reflector.setField(param_0, "resolutions", null);
      Reflector.setField(param_0, "confirmationStatus", null);
      Reflector.setField(param_0, "value", null);
      Reflector.setField(param_0, "name", null);
      Object param_1 = Reflector.getInstance("java.util.HashMap$Node");
      Reflector.setField(param_1, "value", param_0);
      Reflector.setField(param_1, "key", null);
      com.amazon.speech.slu.entityresolution.Resolutions param_2 = (com.amazon.speech.slu.entityresolution.Resolutions) Reflector.getInstance("com.amazon.speech.slu.entityresolution.Resolutions");
      Reflector.setField(param_2, "resolutionsPerAuthority", null);
      com.amazon.speech.slu.Slot param_3 = (com.amazon.speech.slu.Slot) Reflector.getInstance("com.amazon.speech.slu.Slot");
      Reflector.setField(param_3, "resolutions", param_2);
      Reflector.setField(param_3, "confirmationStatus", null);
      Reflector.setField(param_3, "value", null);
      Reflector.setField(param_3, "name", null);
      Object param_4 = Reflector.getInstance("java.util.HashMap$Node");
      Reflector.setField(param_4, "value", param_3);
      Reflector.setField(param_4, "key", null);
      Object [] dynamic_8_array = (Object []) Array.newInstance(Reflector.forName("java.util.HashMap$Node"), 5);
      dynamic_8_array[0] = null;
      dynamic_8_array[1] = null;
      dynamic_8_array[2] = param_4;
      dynamic_8_array[3] = null;
      dynamic_8_array[4] = param_1;
      Object [] param_6 = dynamic_8_array;

      java.util.HashMap param_7 = new java.util.HashMap();

      com.amazon.speech.slu.Intent param_8 = (com.amazon.speech.slu.Intent) Reflector.getInstance("com.amazon.speech.slu.Intent");
      Reflector.setField(param_8, "slots", param_7);
      Reflector.setField(param_8, "confirmationStatus", null);
      Reflector.setField(param_8, "name", null);
      Object param_9 = Reflector.getInstance("com.amazon.speech.speechlet.IntentRequest$Builder");
      Reflector.setField(param_9, "dialogState", null);
      Reflector.setField(param_9, "locale", null);
      Reflector.setField(param_9, "timestamp", null);
      Reflector.setField(param_9, "requestId", null);
      Reflector.setField(param_9, "intent", param_8);
      Object x0 = param_9;

      /* Act */
      Class<?> c = Reflector.forName("com.amazon.speech.speechlet.SpeechletRequest$SpeechletRequestBuilder");
      Method m = c.getDeclaredMethod("access$000", Reflector.forName("com.amazon.speech.speechlet.SpeechletRequest$SpeechletRequestBuilder"));
      m.setAccessible(true);
      retval = (String) m.invoke(null, x0);
    }
    {
      /* Assert result */
      Assert.assertEquals(null, retval);
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_speechlet_SpeechletRequest$SpeechletRequestBuilder_access$100_bda9839c60f24551_000() throws Throwable {

    java.util.Locale retval;
    {
      /* Arrange */
      com.amazon.speech.slu.Slot param_0 = (com.amazon.speech.slu.Slot) Reflector.getInstance("com.amazon.speech.slu.Slot");
      Reflector.setField(param_0, "resolutions", null);
      Reflector.setField(param_0, "confirmationStatus", null);
      Reflector.setField(param_0, "value", null);
      Reflector.setField(param_0, "name", null);
      Object param_1 = Reflector.getInstance("java.util.HashMap$Node");
      Reflector.setField(param_1, "value", param_0);
      Reflector.setField(param_1, "key", null);
      com.amazon.speech.slu.entityresolution.Resolutions param_2 = (com.amazon.speech.slu.entityresolution.Resolutions) Reflector.getInstance("com.amazon.speech.slu.entityresolution.Resolutions");
      Reflector.setField(param_2, "resolutionsPerAuthority", null);
      com.amazon.speech.slu.Slot param_3 = (com.amazon.speech.slu.Slot) Reflector.getInstance("com.amazon.speech.slu.Slot");
      Reflector.setField(param_3, "resolutions", param_2);
      Reflector.setField(param_3, "confirmationStatus", null);
      Reflector.setField(param_3, "value", null);
      Reflector.setField(param_3, "name", null);
      Object param_4 = Reflector.getInstance("java.util.HashMap$Node");
      Reflector.setField(param_4, "value", param_3);
      Reflector.setField(param_4, "key", null);
      Object [] dynamic_8_array = (Object []) Array.newInstance(Reflector.forName("java.util.HashMap$Node"), 5);
      dynamic_8_array[0] = null;
      dynamic_8_array[1] = null;
      dynamic_8_array[2] = param_4;
      dynamic_8_array[3] = null;
      dynamic_8_array[4] = param_1;
      Object [] param_6 = dynamic_8_array;

      java.util.HashMap param_7 = new java.util.HashMap();

      com.amazon.speech.slu.Intent param_8 = (com.amazon.speech.slu.Intent) Reflector.getInstance("com.amazon.speech.slu.Intent");
      Reflector.setField(param_8, "slots", param_7);
      Reflector.setField(param_8, "confirmationStatus", null);
      Reflector.setField(param_8, "name", null);
      Object param_9 = Reflector.getInstance("com.amazon.speech.speechlet.IntentRequest$Builder");
      Reflector.setField(param_9, "dialogState", null);
      Reflector.setField(param_9, "locale", null);
      Reflector.setField(param_9, "timestamp", null);
      Reflector.setField(param_9, "requestId", null);
      Reflector.setField(param_9, "intent", param_8);
      Object x0 = param_9;

      /* Act */
      Class<?> c = Reflector.forName("com.amazon.speech.speechlet.SpeechletRequest$SpeechletRequestBuilder");
      Method m = c.getDeclaredMethod("access$100", Reflector.forName("com.amazon.speech.speechlet.SpeechletRequest$SpeechletRequestBuilder"));
      m.setAccessible(true);
      retval = (java.util.Locale) m.invoke(null, x0);
    }
    {
      /* Assert result */
      Assert.assertEquals(null, retval);
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_speechlet_SpeechletRequest$SpeechletRequestBuilder_access$200_c8bcfff00300d434_000() throws Throwable {

    java.util.Date retval;
    {
      /* Arrange */
      com.amazon.speech.slu.Slot param_0 = (com.amazon.speech.slu.Slot) Reflector.getInstance("com.amazon.speech.slu.Slot");
      Reflector.setField(param_0, "resolutions", null);
      Reflector.setField(param_0, "confirmationStatus", null);
      Reflector.setField(param_0, "value", null);
      Reflector.setField(param_0, "name", null);
      Object param_1 = Reflector.getInstance("java.util.HashMap$Node");
      Reflector.setField(param_1, "value", param_0);
      Reflector.setField(param_1, "key", null);
      com.amazon.speech.slu.entityresolution.Resolutions param_2 = (com.amazon.speech.slu.entityresolution.Resolutions) Reflector.getInstance("com.amazon.speech.slu.entityresolution.Resolutions");
      Reflector.setField(param_2, "resolutionsPerAuthority", null);
      com.amazon.speech.slu.Slot param_3 = (com.amazon.speech.slu.Slot) Reflector.getInstance("com.amazon.speech.slu.Slot");
      Reflector.setField(param_3, "resolutions", param_2);
      Reflector.setField(param_3, "confirmationStatus", null);
      Reflector.setField(param_3, "value", null);
      Reflector.setField(param_3, "name", null);
      Object param_4 = Reflector.getInstance("java.util.HashMap$Node");
      Reflector.setField(param_4, "value", param_3);
      Reflector.setField(param_4, "key", null);
      Object [] dynamic_8_array = (Object []) Array.newInstance(Reflector.forName("java.util.HashMap$Node"), 5);
      dynamic_8_array[0] = null;
      dynamic_8_array[1] = null;
      dynamic_8_array[2] = param_4;
      dynamic_8_array[3] = null;
      dynamic_8_array[4] = param_1;
      Object [] param_6 = dynamic_8_array;

      java.util.HashMap param_7 = new java.util.HashMap();

      com.amazon.speech.slu.Intent param_8 = (com.amazon.speech.slu.Intent) Reflector.getInstance("com.amazon.speech.slu.Intent");
      Reflector.setField(param_8, "slots", param_7);
      Reflector.setField(param_8, "confirmationStatus", null);
      Reflector.setField(param_8, "name", null);
      Object param_9 = Reflector.getInstance("com.amazon.speech.speechlet.IntentRequest$Builder");
      Reflector.setField(param_9, "dialogState", null);
      Reflector.setField(param_9, "locale", null);
      Reflector.setField(param_9, "timestamp", null);
      Reflector.setField(param_9, "requestId", null);
      Reflector.setField(param_9, "intent", param_8);
      Object x0 = param_9;

      /* Act */
      Class<?> c = Reflector.forName("com.amazon.speech.speechlet.SpeechletRequest$SpeechletRequestBuilder");
      Method m = c.getDeclaredMethod("access$200", Reflector.forName("com.amazon.speech.speechlet.SpeechletRequest$SpeechletRequestBuilder"));
      m.setAccessible(true);
      retval = (java.util.Date) m.invoke(null, x0);
    }
    {
      /* Assert result */
      Assert.assertEquals(null, retval);
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_speechlet_SpeechletRequest$SpeechletRequestBuilder_getRequestId_3cbe825f60cd7270_000() throws Throwable {

    String retval;
    {
      /* Arrange */
      Object param_0 = Reflector.getInstance("com.amazon.speech.speechlet.IntentRequest$Builder");
      Reflector.setField(param_0, "dialogState", null);
      Reflector.setField(param_0, "locale", null);
      Reflector.setField(param_0, "timestamp", null);
      Reflector.setField(param_0, "requestId", null);
      Reflector.setField(param_0, "intent", null);

      /* Act */
      Class<?> c = Reflector.forName("com.amazon.speech.speechlet.SpeechletRequest$SpeechletRequestBuilder");
      Method m = c.getDeclaredMethod("getRequestId");
      m.setAccessible(true);
      retval = (String) m.invoke(param_0);
    }
    {
      /* Assert result */
      Assert.assertEquals(null, retval);
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_speechlet_SpeechletRequest$SpeechletRequestBuilder_withLocale_8260254ed78e9139_000() throws Throwable {

    Object retval;
    {
      /* Arrange */
      Object param_1 = Reflector.getInstance("com.amazon.speech.speechlet.IntentRequest$Builder");
      Reflector.setField(param_1, "dialogState", null);
      Reflector.setField(param_1, "locale", null);
      Reflector.setField(param_1, "timestamp", null);
      Reflector.setField(param_1, "requestId", null);
      Reflector.setField(param_1, "intent", null);
      java.util.Locale locale = null;

      /* Act */
      Class<?> c = Reflector.forName("com.amazon.speech.speechlet.SpeechletRequest$SpeechletRequestBuilder");
      Method m = c.getDeclaredMethod("withLocale", Reflector.forName("java.util.Locale"));
      m.setAccessible(true);
      retval = (Object) m.invoke(param_1, locale);
    }
    {
      /* Assert result */
      Assert.assertNotNull(retval);
      Assert.assertEquals(null, ((String) Reflector.getInstanceField(retval, "requestId")));
      Assert.assertEquals(null, Reflector.getInstanceField(retval, "timestamp"));
      Assert.assertEquals(null, Reflector.getInstanceField(retval, "locale"));
      Assert.assertEquals(null, Reflector.getInstanceField(retval, "intent"));
      Assert.assertEquals(null, Reflector.getInstanceField(retval, "dialogState"));
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_speechlet_SpeechletRequest$SpeechletRequestBuilder_withRequestId_9b8bbbc2ffb77b27_000() throws Throwable {

    Object retval;
    {
      /* Arrange */
      Object param_1 = Reflector.getInstance("com.amazon.speech.speechlet.IntentRequest$Builder");
      Reflector.setField(param_1, "dialogState", null);
      Reflector.setField(param_1, "locale", null);
      Reflector.setField(param_1, "timestamp", null);
      Reflector.setField(param_1, "requestId", null);
      Reflector.setField(param_1, "intent", null);
      String requestId = null;

      /* Act */
      Class<?> c = Reflector.forName("com.amazon.speech.speechlet.SpeechletRequest$SpeechletRequestBuilder");
      Method m = c.getDeclaredMethod("withRequestId", Reflector.forName("java.lang.String"));
      m.setAccessible(true);
      retval = (Object) m.invoke(param_1, requestId);
    }
    {
      /* Assert result */
      Assert.assertNotNull(retval);
      Assert.assertEquals(null, ((String) Reflector.getInstanceField(retval, "requestId")));
      Assert.assertEquals(null, Reflector.getInstanceField(retval, "timestamp"));
      Assert.assertEquals(null, Reflector.getInstanceField(retval, "locale"));
      Assert.assertEquals(null, Reflector.getInstanceField(retval, "intent"));
      Assert.assertEquals(null, Reflector.getInstanceField(retval, "dialogState"));
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   * conditional line 192 branch to line 192
   */

  @org.junit.Test
  public void com_amazon_speech_speechlet_SpeechletRequest$SpeechletRequestBuilder_withTimestamp_94e5e17ddb671913_000() throws Throwable {

    Object retval;
    {
      /* Arrange */
      Object param_1 = Reflector.getInstance("com.amazon.speech.speechlet.IntentRequest$Builder");
      Reflector.setField(param_1, "dialogState", null);
      Reflector.setField(param_1, "locale", null);
      Reflector.setField(param_1, "timestamp", null);
      Reflector.setField(param_1, "requestId", null);
      Reflector.setField(param_1, "intent", null);
      java.util.Date timestamp = null;

      /* Act */
      Class<?> c = Reflector.forName("com.amazon.speech.speechlet.SpeechletRequest$SpeechletRequestBuilder");
      Method m = c.getDeclaredMethod("withTimestamp", Reflector.forName("java.util.Date"));
      m.setAccessible(true);
      retval = (Object) m.invoke(param_1, timestamp);
    }
    {
      /* Assert result */
      Assert.assertNotNull(retval);
      Assert.assertEquals(null, ((String) Reflector.getInstanceField(retval, "requestId")));
      Assert.assertEquals(null, Reflector.getInstanceField(retval, "timestamp"));
      Assert.assertEquals(null, Reflector.getInstanceField(retval, "locale"));
      Assert.assertEquals(null, Reflector.getInstanceField(retval, "intent"));
      Assert.assertEquals(null, Reflector.getInstanceField(retval, "dialogState"));
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_speechlet_SpeechletRequest_getLocale_f19193210234f72f_000() throws Throwable {

    java.util.Locale retval;
    {
      /* Arrange */
      com.amazon.speech.speechlet.CoreSpeechletRequest param_0 = (com.amazon.speech.speechlet.CoreSpeechletRequest) Reflector.getInstance("com.amazon.speech.speechlet.CoreSpeechletRequest");
      Reflector.setField(param_0, "requestId", null);
      Reflector.setField(param_0, "locale", null);
      Reflector.setField(param_0, "timestamp", null);

      /* Act */
      retval = param_0.getLocale();
    }
    {
      /* Assert result */
      Assert.assertEquals(null, retval);
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_amazon_speech_speechlet_SpeechletRequest_getRequestId_8880f73a81e52484_000() throws Throwable {

    String retval;
    {
      /* Arrange */
      com.amazon.speech.speechlet.CoreSpeechletRequest param_0 = (com.amazon.speech.speechlet.CoreSpeechletRequest) Reflector.getInstance("com.amazon.speech.speechlet.CoreSpeechletRequest");
      Reflector.setField(param_0, "requestId", null);
      Reflector.setField(param_0, "locale", null);
      Reflector.setField(param_0, "timestamp", null);

      /* Act */
      retval = param_0.getRequestId();
    }
    {
      /* Assert result */
      Assert.assertEquals(null, retval);
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   * conditional line 139 branch to line 139
   */

  @org.junit.Test
  public void com_amazon_speech_speechlet_SpeechletRequest_getTimestamp_b85502f672665fa6_000() throws Throwable {

    java.util.Date retval;
    {
      /* Arrange */
      com.amazon.speech.speechlet.CoreSpeechletRequest param_0 = (com.amazon.speech.speechlet.CoreSpeechletRequest) Reflector.getInstance("com.amazon.speech.speechlet.CoreSpeechletRequest");
      Reflector.setField(param_0, "requestId", null);
      Reflector.setField(param_0, "locale", null);
      Reflector.setField(param_0, "timestamp", null);

      /* Act */
      retval = param_0.getTimestamp();
    }
    {
      /* Assert result */
      Assert.assertEquals(null, retval);
    }
  }
}
